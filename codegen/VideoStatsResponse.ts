/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as __NAMESPACE__ from "./.";
export interface IVideoStatsResponse {
    status: string;
    mostViewedVideos: Array<__NAMESPACE__.IMostViewedVideo>;
}
export interface IVideoStatsResponseArgs {
    status: string;
    mostViewedVideos: Array<__NAMESPACE__.IMostViewedVideoArgs>;
}
export const VideoStatsResponseCodec: thrift.IStructCodec<IVideoStatsResponseArgs, IVideoStatsResponse> = {
    encode(args: IVideoStatsResponseArgs, output: thrift.TProtocol): void {
        const obj = {
            status: args.status,
            mostViewedVideos: args.mostViewedVideos
        };
        output.writeStructBegin("VideoStatsResponse");
        if (obj.status != null) {
            output.writeFieldBegin("status", thrift.TType.STRING, 1);
            output.writeString(obj.status);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
        if (obj.mostViewedVideos != null) {
            output.writeFieldBegin("mostViewedVideos", thrift.TType.LIST, 2);
            output.writeListBegin(thrift.TType.STRUCT, obj.mostViewedVideos.length);
            obj.mostViewedVideos.forEach((value_1: __NAMESPACE__.IMostViewedVideoArgs): void => {
                __NAMESPACE__.MostViewedVideoCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[mostViewedVideos] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IVideoStatsResponse {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.status = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.LIST) {
                        const value_3: Array<__NAMESPACE__.IMostViewedVideo> = new Array<__NAMESPACE__.IMostViewedVideo>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: __NAMESPACE__.IMostViewedVideo = __NAMESPACE__.MostViewedVideoCodec.decode(input);
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.mostViewedVideos = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.status !== undefined && _args.mostViewedVideos !== undefined) {
            return {
                status: _args.status,
                mostViewedVideos: _args.mostViewedVideos
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read VideoStatsResponse from input");
        }
    }
};
export class VideoStatsResponse extends thrift.StructLike implements IVideoStatsResponse {
    public status: string;
    public mostViewedVideos: Array<__NAMESPACE__.IMostViewedVideo>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IVideoStatsResponseArgs) {
        super();
        if (args.status != null) {
            const value_5: string = args.status;
            this.status = value_5;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
        if (args.mostViewedVideos != null) {
            const value_6: Array<__NAMESPACE__.IMostViewedVideo> = new Array<__NAMESPACE__.IMostViewedVideo>();
            args.mostViewedVideos.forEach((value_7: __NAMESPACE__.IMostViewedVideoArgs): void => {
                const value_8: __NAMESPACE__.IMostViewedVideo = new __NAMESPACE__.MostViewedVideo(value_7);
                value_6.push(value_8);
            });
            this.mostViewedVideos = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[mostViewedVideos] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): VideoStatsResponse {
        return new VideoStatsResponse(VideoStatsResponseCodec.decode(input));
    }
    public static write(args: IVideoStatsResponseArgs, output: thrift.TProtocol): void {
        return VideoStatsResponseCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return VideoStatsResponseCodec.encode(this, output);
    }
}

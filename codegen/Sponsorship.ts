/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as __NAMESPACE__ from "./.";
export interface ISponsorship {
    sponsorshipType: __NAMESPACE__.SponsorshipType;
    sponsorName: string;
    sponsorLogo: string;
    sponsorLink: string;
    targeting?: __NAMESPACE__.ISponsorshipTargeting;
    aboutLink?: string;
    sponsorLogoDimensions?: __NAMESPACE__.ISponsorshipLogoDimensions;
    highContrastSponsorLogo?: string;
    highContrastSponsorLogoDimensions?: __NAMESPACE__.ISponsorshipLogoDimensions;
    validFrom?: __NAMESPACE__.ICapiDateTime;
    validTo?: __NAMESPACE__.ICapiDateTime;
}
export interface ISponsorshipArgs {
    sponsorshipType: __NAMESPACE__.SponsorshipType;
    sponsorName: string;
    sponsorLogo: string;
    sponsorLink: string;
    targeting?: __NAMESPACE__.ISponsorshipTargetingArgs;
    aboutLink?: string;
    sponsorLogoDimensions?: __NAMESPACE__.ISponsorshipLogoDimensionsArgs;
    highContrastSponsorLogo?: string;
    highContrastSponsorLogoDimensions?: __NAMESPACE__.ISponsorshipLogoDimensionsArgs;
    validFrom?: __NAMESPACE__.ICapiDateTimeArgs;
    validTo?: __NAMESPACE__.ICapiDateTimeArgs;
}
export const SponsorshipCodec: thrift.IStructCodec<ISponsorshipArgs, ISponsorship> = {
    encode(args: ISponsorshipArgs, output: thrift.TProtocol): void {
        const obj = {
            sponsorshipType: args.sponsorshipType,
            sponsorName: args.sponsorName,
            sponsorLogo: args.sponsorLogo,
            sponsorLink: args.sponsorLink,
            targeting: args.targeting,
            aboutLink: args.aboutLink,
            sponsorLogoDimensions: args.sponsorLogoDimensions,
            highContrastSponsorLogo: args.highContrastSponsorLogo,
            highContrastSponsorLogoDimensions: args.highContrastSponsorLogoDimensions,
            validFrom: args.validFrom,
            validTo: args.validTo
        };
        output.writeStructBegin("Sponsorship");
        if (obj.sponsorshipType != null) {
            output.writeFieldBegin("sponsorshipType", thrift.TType.I32, 1);
            output.writeI32(obj.sponsorshipType);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[sponsorshipType] is unset!");
        }
        if (obj.sponsorName != null) {
            output.writeFieldBegin("sponsorName", thrift.TType.STRING, 2);
            output.writeString(obj.sponsorName);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[sponsorName] is unset!");
        }
        if (obj.sponsorLogo != null) {
            output.writeFieldBegin("sponsorLogo", thrift.TType.STRING, 3);
            output.writeString(obj.sponsorLogo);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[sponsorLogo] is unset!");
        }
        if (obj.sponsorLink != null) {
            output.writeFieldBegin("sponsorLink", thrift.TType.STRING, 4);
            output.writeString(obj.sponsorLink);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[sponsorLink] is unset!");
        }
        if (obj.targeting != null) {
            output.writeFieldBegin("targeting", thrift.TType.STRUCT, 5);
            __NAMESPACE__.SponsorshipTargetingCodec.encode(obj.targeting, output);
            output.writeFieldEnd();
        }
        if (obj.aboutLink != null) {
            output.writeFieldBegin("aboutLink", thrift.TType.STRING, 6);
            output.writeString(obj.aboutLink);
            output.writeFieldEnd();
        }
        if (obj.sponsorLogoDimensions != null) {
            output.writeFieldBegin("sponsorLogoDimensions", thrift.TType.STRUCT, 7);
            __NAMESPACE__.SponsorshipLogoDimensionsCodec.encode(obj.sponsorLogoDimensions, output);
            output.writeFieldEnd();
        }
        if (obj.highContrastSponsorLogo != null) {
            output.writeFieldBegin("highContrastSponsorLogo", thrift.TType.STRING, 8);
            output.writeString(obj.highContrastSponsorLogo);
            output.writeFieldEnd();
        }
        if (obj.highContrastSponsorLogoDimensions != null) {
            output.writeFieldBegin("highContrastSponsorLogoDimensions", thrift.TType.STRUCT, 9);
            __NAMESPACE__.SponsorshipLogoDimensionsCodec.encode(obj.highContrastSponsorLogoDimensions, output);
            output.writeFieldEnd();
        }
        if (obj.validFrom != null) {
            output.writeFieldBegin("validFrom", thrift.TType.STRUCT, 10);
            __NAMESPACE__.CapiDateTimeCodec.encode(obj.validFrom, output);
            output.writeFieldEnd();
        }
        if (obj.validTo != null) {
            output.writeFieldBegin("validTo", thrift.TType.STRUCT, 11);
            __NAMESPACE__.CapiDateTimeCodec.encode(obj.validTo, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): ISponsorship {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: __NAMESPACE__.SponsorshipType = input.readI32();
                        _args.sponsorshipType = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.sponsorName = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.sponsorLogo = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.sponsorLink = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_5: __NAMESPACE__.ISponsorshipTargeting = __NAMESPACE__.SponsorshipTargetingCodec.decode(input);
                        _args.targeting = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRING) {
                        const value_6: string = input.readString();
                        _args.aboutLink = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_7: __NAMESPACE__.ISponsorshipLogoDimensions = __NAMESPACE__.SponsorshipLogoDimensionsCodec.decode(input);
                        _args.sponsorLogoDimensions = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: string = input.readString();
                        _args.highContrastSponsorLogo = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_9: __NAMESPACE__.ISponsorshipLogoDimensions = __NAMESPACE__.SponsorshipLogoDimensionsCodec.decode(input);
                        _args.highContrastSponsorLogoDimensions = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_10: __NAMESPACE__.ICapiDateTime = __NAMESPACE__.CapiDateTimeCodec.decode(input);
                        _args.validFrom = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_11: __NAMESPACE__.ICapiDateTime = __NAMESPACE__.CapiDateTimeCodec.decode(input);
                        _args.validTo = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.sponsorshipType !== undefined && _args.sponsorName !== undefined && _args.sponsorLogo !== undefined && _args.sponsorLink !== undefined) {
            return {
                sponsorshipType: _args.sponsorshipType,
                sponsorName: _args.sponsorName,
                sponsorLogo: _args.sponsorLogo,
                sponsorLink: _args.sponsorLink,
                targeting: _args.targeting,
                aboutLink: _args.aboutLink,
                sponsorLogoDimensions: _args.sponsorLogoDimensions,
                highContrastSponsorLogo: _args.highContrastSponsorLogo,
                highContrastSponsorLogoDimensions: _args.highContrastSponsorLogoDimensions,
                validFrom: _args.validFrom,
                validTo: _args.validTo
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Sponsorship from input");
        }
    }
};
export class Sponsorship extends thrift.StructLike implements ISponsorship {
    public sponsorshipType: __NAMESPACE__.SponsorshipType;
    public sponsorName: string;
    public sponsorLogo: string;
    public sponsorLink: string;
    public targeting?: __NAMESPACE__.ISponsorshipTargeting;
    public aboutLink?: string;
    public sponsorLogoDimensions?: __NAMESPACE__.ISponsorshipLogoDimensions;
    public highContrastSponsorLogo?: string;
    public highContrastSponsorLogoDimensions?: __NAMESPACE__.ISponsorshipLogoDimensions;
    public validFrom?: __NAMESPACE__.ICapiDateTime;
    public validTo?: __NAMESPACE__.ICapiDateTime;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: ISponsorshipArgs) {
        super();
        if (args.sponsorshipType != null) {
            const value_12: __NAMESPACE__.SponsorshipType = args.sponsorshipType;
            this.sponsorshipType = value_12;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[sponsorshipType] is unset!");
        }
        if (args.sponsorName != null) {
            const value_13: string = args.sponsorName;
            this.sponsorName = value_13;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[sponsorName] is unset!");
        }
        if (args.sponsorLogo != null) {
            const value_14: string = args.sponsorLogo;
            this.sponsorLogo = value_14;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[sponsorLogo] is unset!");
        }
        if (args.sponsorLink != null) {
            const value_15: string = args.sponsorLink;
            this.sponsorLink = value_15;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[sponsorLink] is unset!");
        }
        if (args.targeting != null) {
            const value_16: __NAMESPACE__.ISponsorshipTargeting = new __NAMESPACE__.SponsorshipTargeting(args.targeting);
            this.targeting = value_16;
        }
        if (args.aboutLink != null) {
            const value_17: string = args.aboutLink;
            this.aboutLink = value_17;
        }
        if (args.sponsorLogoDimensions != null) {
            const value_18: __NAMESPACE__.ISponsorshipLogoDimensions = new __NAMESPACE__.SponsorshipLogoDimensions(args.sponsorLogoDimensions);
            this.sponsorLogoDimensions = value_18;
        }
        if (args.highContrastSponsorLogo != null) {
            const value_19: string = args.highContrastSponsorLogo;
            this.highContrastSponsorLogo = value_19;
        }
        if (args.highContrastSponsorLogoDimensions != null) {
            const value_20: __NAMESPACE__.ISponsorshipLogoDimensions = new __NAMESPACE__.SponsorshipLogoDimensions(args.highContrastSponsorLogoDimensions);
            this.highContrastSponsorLogoDimensions = value_20;
        }
        if (args.validFrom != null) {
            const value_21: __NAMESPACE__.ICapiDateTime = new __NAMESPACE__.CapiDateTime(args.validFrom);
            this.validFrom = value_21;
        }
        if (args.validTo != null) {
            const value_22: __NAMESPACE__.ICapiDateTime = new __NAMESPACE__.CapiDateTime(args.validTo);
            this.validTo = value_22;
        }
    }
    public static read(input: thrift.TProtocol): Sponsorship {
        return new Sponsorship(SponsorshipCodec.decode(input));
    }
    public static write(args: ISponsorshipArgs, output: thrift.TProtocol): void {
        return SponsorshipCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return SponsorshipCodec.encode(this, output);
    }
}

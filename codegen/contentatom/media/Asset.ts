/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as __NAMESPACE__ from "./.";
export interface IAsset {
    assetType: __NAMESPACE__.AssetType;
    version: thrift.Int64;
    id: string;
    platform: __NAMESPACE__.Platform;
    mimeType?: string;
}
export interface IAssetArgs {
    assetType: __NAMESPACE__.AssetType;
    version: number | string | thrift.Int64;
    id: string;
    platform: __NAMESPACE__.Platform;
    mimeType?: string;
}
export const AssetCodec: thrift.IStructCodec<IAssetArgs, IAsset> = {
    encode(args: IAssetArgs, output: thrift.TProtocol): void {
        const obj = {
            assetType: args.assetType,
            version: (typeof args.version === "number" ? new thrift.Int64(args.version) : typeof args.version === "string" ? thrift.Int64.fromDecimalString(args.version) : args.version),
            id: args.id,
            platform: args.platform,
            mimeType: args.mimeType
        };
        output.writeStructBegin("Asset");
        if (obj.assetType != null) {
            output.writeFieldBegin("assetType", thrift.TType.I32, 1);
            output.writeI32(obj.assetType);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[assetType] is unset!");
        }
        if (obj.version != null) {
            output.writeFieldBegin("version", thrift.TType.I64, 2);
            output.writeI64((typeof obj.version === "number" ? new thrift.Int64(obj.version) : typeof obj.version === "string" ? thrift.Int64.fromDecimalString(obj.version) : obj.version));
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[version] is unset!");
        }
        if (obj.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 3);
            output.writeString(obj.id);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (obj.platform != null) {
            output.writeFieldBegin("platform", thrift.TType.I32, 4);
            output.writeI32(obj.platform);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[platform] is unset!");
        }
        if (obj.mimeType != null) {
            output.writeFieldBegin("mimeType", thrift.TType.STRING, 5);
            output.writeString(obj.mimeType);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IAsset {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: __NAMESPACE__.AssetType = input.readI32();
                        _args.assetType = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I64) {
                        const value_2: thrift.Int64 = input.readI64();
                        _args.version = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.I32) {
                        const value_4: __NAMESPACE__.Platform = input.readI32();
                        _args.platform = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.mimeType = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.assetType !== undefined && _args.version !== undefined && _args.id !== undefined && _args.platform !== undefined) {
            return {
                assetType: _args.assetType,
                version: _args.version,
                id: _args.id,
                platform: _args.platform,
                mimeType: _args.mimeType
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Asset from input");
        }
    }
};
export class Asset extends thrift.StructLike implements IAsset {
    public assetType: __NAMESPACE__.AssetType;
    public version: thrift.Int64;
    public id: string;
    public platform: __NAMESPACE__.Platform;
    public mimeType?: string;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IAssetArgs) {
        super();
        if (args.assetType != null) {
            const value_6: __NAMESPACE__.AssetType = args.assetType;
            this.assetType = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[assetType] is unset!");
        }
        if (args.version != null) {
            const value_7: thrift.Int64 = (typeof args.version === "number" ? new thrift.Int64(args.version) : typeof args.version === "string" ? thrift.Int64.fromDecimalString(args.version) : args.version);
            this.version = value_7;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[version] is unset!");
        }
        if (args.id != null) {
            const value_8: string = args.id;
            this.id = value_8;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (args.platform != null) {
            const value_9: __NAMESPACE__.Platform = args.platform;
            this.platform = value_9;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[platform] is unset!");
        }
        if (args.mimeType != null) {
            const value_10: string = args.mimeType;
            this.mimeType = value_10;
        }
    }
    public static read(input: thrift.TProtocol): Asset {
        return new Asset(AssetCodec.decode(input));
    }
    public static write(args: IAssetArgs, output: thrift.TProtocol): void {
        return AssetCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return AssetCodec.encode(this, output);
    }
}

/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export interface IRange {
    from: number;
    to: number;
}
export interface IRangeArgs {
    from: number;
    to: number;
}
export const RangeCodec: thrift.IStructCodec<IRangeArgs, IRange> = {
    encode(args: IRangeArgs, output: thrift.TProtocol): void {
        const obj = {
            from: args.from,
            to: args.to
        };
        output.writeStructBegin("Range");
        if (obj.from != null) {
            output.writeFieldBegin("from", thrift.TType.I16, 1);
            output.writeI16(obj.from);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[from] is unset!");
        }
        if (obj.to != null) {
            output.writeFieldBegin("to", thrift.TType.I16, 2);
            output.writeI16(obj.to);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[to] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IRange {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I16) {
                        const value_1: number = input.readI16();
                        _args.from = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I16) {
                        const value_2: number = input.readI16();
                        _args.to = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.from !== undefined && _args.to !== undefined) {
            return {
                from: _args.from,
                to: _args.to
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Range from input");
        }
    }
};
export class Range extends thrift.StructLike implements IRange {
    public from: number;
    public to: number;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IRangeArgs) {
        super();
        if (args.from != null) {
            const value_3: number = args.from;
            this.from = value_3;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[from] is unset!");
        }
        if (args.to != null) {
            const value_4: number = args.to;
            this.to = value_4;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[to] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): Range {
        return new Range(RangeCodec.decode(input));
    }
    public static write(args: IRangeArgs, output: thrift.TProtocol): void {
        return RangeCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return RangeCodec.encode(this, output);
    }
}

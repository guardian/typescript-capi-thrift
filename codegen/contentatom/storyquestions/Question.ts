/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as __NAMESPACE__ from "./.";
export interface IQuestion {
    questionId: string;
    questionText: string;
    answers?: Array<__NAMESPACE__.IAnswer>;
}
export interface IQuestionArgs {
    questionId: string;
    questionText: string;
    answers?: Array<__NAMESPACE__.IAnswerArgs>;
}
export const QuestionCodec: thrift.IStructCodec<IQuestionArgs, IQuestion> = {
    encode(args: IQuestionArgs, output: thrift.TProtocol): void {
        const obj = {
            questionId: args.questionId,
            questionText: args.questionText,
            answers: (args.answers != null ? args.answers : [])
        };
        output.writeStructBegin("Question");
        if (obj.questionId != null) {
            output.writeFieldBegin("questionId", thrift.TType.STRING, 1);
            output.writeString(obj.questionId);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[questionId] is unset!");
        }
        if (obj.questionText != null) {
            output.writeFieldBegin("questionText", thrift.TType.STRING, 2);
            output.writeString(obj.questionText);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[questionText] is unset!");
        }
        if (obj.answers != null) {
            output.writeFieldBegin("answers", thrift.TType.LIST, 3);
            output.writeListBegin(thrift.TType.STRUCT, obj.answers.length);
            obj.answers.forEach((value_1: __NAMESPACE__.IAnswerArgs): void => {
                __NAMESPACE__.AnswerCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IQuestion {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.questionId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.questionText = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.LIST) {
                        const value_4: Array<__NAMESPACE__.IAnswer> = new Array<__NAMESPACE__.IAnswer>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: __NAMESPACE__.IAnswer = __NAMESPACE__.AnswerCodec.decode(input);
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.answers = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.questionId !== undefined && _args.questionText !== undefined) {
            return {
                questionId: _args.questionId,
                questionText: _args.questionText,
                answers: (_args.answers != null ? _args.answers : [])
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Question from input");
        }
    }
};
export class Question extends thrift.StructLike implements IQuestion {
    public questionId: string;
    public questionText: string;
    public answers?: Array<__NAMESPACE__.IAnswer> = [];
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IQuestionArgs) {
        super();
        if (args.questionId != null) {
            const value_6: string = args.questionId;
            this.questionId = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[questionId] is unset!");
        }
        if (args.questionText != null) {
            const value_7: string = args.questionText;
            this.questionText = value_7;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[questionText] is unset!");
        }
        if (args.answers != null) {
            const value_8: Array<__NAMESPACE__.IAnswer> = new Array<__NAMESPACE__.IAnswer>();
            args.answers.forEach((value_9: __NAMESPACE__.IAnswerArgs): void => {
                const value_10: __NAMESPACE__.IAnswer = new __NAMESPACE__.Answer(value_9);
                value_8.push(value_10);
            });
            this.answers = value_8;
        }
    }
    public static read(input: thrift.TProtocol): Question {
        return new Question(QuestionCodec.decode(input));
    }
    public static write(args: IQuestionArgs, output: thrift.TProtocol): void {
        return QuestionCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return QuestionCodec.encode(this, output);
    }
}

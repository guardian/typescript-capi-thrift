/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as com_gu_contentatom_thrift from "./../../com/gu/contentatom/thrift";
import * as contentatom_storyquestions from "./../storyquestions";
import * as __NAMESPACE__ from "./.";
export interface IQAndAAtom {
    typeLabel?: string;
    eventImage?: com_gu_contentatom_thrift.IImage;
    item: __NAMESPACE__.IQAndAItem;
    question?: contentatom_storyquestions.IQuestion;
}
export interface IQAndAAtomArgs {
    typeLabel?: string;
    eventImage?: com_gu_contentatom_thrift.IImageArgs;
    item: __NAMESPACE__.IQAndAItemArgs;
    question?: contentatom_storyquestions.IQuestionArgs;
}
export const QAndAAtomCodec: thrift.IStructCodec<IQAndAAtomArgs, IQAndAAtom> = {
    encode(args: IQAndAAtomArgs, output: thrift.TProtocol): void {
        const obj = {
            typeLabel: args.typeLabel,
            eventImage: args.eventImage,
            item: args.item,
            question: args.question
        };
        output.writeStructBegin("QAndAAtom");
        if (obj.typeLabel != null) {
            output.writeFieldBegin("typeLabel", thrift.TType.STRING, 1);
            output.writeString(obj.typeLabel);
            output.writeFieldEnd();
        }
        if (obj.eventImage != null) {
            output.writeFieldBegin("eventImage", thrift.TType.STRUCT, 3);
            com_gu_contentatom_thrift.ImageCodec.encode(obj.eventImage, output);
            output.writeFieldEnd();
        }
        if (obj.item != null) {
            output.writeFieldBegin("item", thrift.TType.STRUCT, 4);
            __NAMESPACE__.QAndAItemCodec.encode(obj.item, output);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[item] is unset!");
        }
        if (obj.question != null) {
            output.writeFieldBegin("question", thrift.TType.STRUCT, 5);
            contentatom_storyquestions.QuestionCodec.encode(obj.question, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IQAndAAtom {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_1: string = input.readString();
                        _args.typeLabel = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_2: com_gu_contentatom_thrift.IImage = com_gu_contentatom_thrift.ImageCodec.decode(input);
                        _args.eventImage = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_3: __NAMESPACE__.IQAndAItem = __NAMESPACE__.QAndAItemCodec.decode(input);
                        _args.item = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_4: contentatom_storyquestions.IQuestion = contentatom_storyquestions.QuestionCodec.decode(input);
                        _args.question = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.item !== undefined) {
            return {
                typeLabel: _args.typeLabel,
                eventImage: _args.eventImage,
                item: _args.item,
                question: _args.question
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read QAndAAtom from input");
        }
    }
};
export class QAndAAtom extends thrift.StructLike implements IQAndAAtom {
    public typeLabel?: string;
    public eventImage?: com_gu_contentatom_thrift.IImage;
    public item: __NAMESPACE__.IQAndAItem;
    public question?: contentatom_storyquestions.IQuestion;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IQAndAAtomArgs) {
        super();
        if (args.typeLabel != null) {
            const value_5: string = args.typeLabel;
            this.typeLabel = value_5;
        }
        if (args.eventImage != null) {
            const value_6: com_gu_contentatom_thrift.IImage = new com_gu_contentatom_thrift.Image(args.eventImage);
            this.eventImage = value_6;
        }
        if (args.item != null) {
            const value_7: __NAMESPACE__.IQAndAItem = new __NAMESPACE__.QAndAItem(args.item);
            this.item = value_7;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[item] is unset!");
        }
        if (args.question != null) {
            const value_8: contentatom_storyquestions.IQuestion = new contentatom_storyquestions.Question(args.question);
            this.question = value_8;
        }
    }
    public static read(input: thrift.TProtocol): QAndAAtom {
        return new QAndAAtom(QAndAAtomCodec.decode(input));
    }
    public static write(args: IQAndAAtomArgs, output: thrift.TProtocol): void {
        return QAndAAtomCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return QAndAAtomCodec.encode(this, output);
    }
}

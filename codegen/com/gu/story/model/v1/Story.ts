/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as com_gu_contentatom_thrift from "./../../../contentatom/thrift";
import * as __NAMESPACE__ from "./.";
export interface IStory {
    id: string;
    name: string;
    summary: string;
    events: Array<__NAMESPACE__.IStoryEvent>;
    atoms: Array<com_gu_contentatom_thrift.IAtom>;
}
export interface IStoryArgs {
    id: string;
    name: string;
    summary: string;
    events: Array<__NAMESPACE__.IStoryEventArgs>;
    atoms: Array<com_gu_contentatom_thrift.IAtomArgs>;
}
export const StoryCodec: thrift.IStructCodec<IStoryArgs, IStory> = {
    encode(args: IStoryArgs, output: thrift.TProtocol): void {
        const obj = {
            id: args.id,
            name: args.name,
            summary: args.summary,
            events: args.events,
            atoms: args.atoms
        };
        output.writeStructBegin("Story");
        if (obj.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 1);
            output.writeString(obj.id);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (obj.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 2);
            output.writeString(obj.name);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[name] is unset!");
        }
        if (obj.summary != null) {
            output.writeFieldBegin("summary", thrift.TType.STRING, 3);
            output.writeString(obj.summary);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[summary] is unset!");
        }
        if (obj.events != null) {
            output.writeFieldBegin("events", thrift.TType.LIST, 4);
            output.writeListBegin(thrift.TType.STRUCT, obj.events.length);
            obj.events.forEach((value_1: __NAMESPACE__.IStoryEventArgs): void => {
                __NAMESPACE__.StoryEventCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[events] is unset!");
        }
        if (obj.atoms != null) {
            output.writeFieldBegin("atoms", thrift.TType.LIST, 5);
            output.writeListBegin(thrift.TType.STRUCT, obj.atoms.length);
            obj.atoms.forEach((value_2: com_gu_contentatom_thrift.IAtomArgs): void => {
                com_gu_contentatom_thrift.AtomCodec.encode(value_2, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[atoms] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IStory {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.name = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.summary = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.LIST) {
                        const value_6: Array<__NAMESPACE__.IStoryEvent> = new Array<__NAMESPACE__.IStoryEvent>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_7: __NAMESPACE__.IStoryEvent = __NAMESPACE__.StoryEventCodec.decode(input);
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.events = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.LIST) {
                        const value_8: Array<com_gu_contentatom_thrift.IAtom> = new Array<com_gu_contentatom_thrift.IAtom>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_9: com_gu_contentatom_thrift.IAtom = com_gu_contentatom_thrift.AtomCodec.decode(input);
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.atoms = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.id !== undefined && _args.name !== undefined && _args.summary !== undefined && _args.events !== undefined && _args.atoms !== undefined) {
            return {
                id: _args.id,
                name: _args.name,
                summary: _args.summary,
                events: _args.events,
                atoms: _args.atoms
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Story from input");
        }
    }
};
export class Story extends thrift.StructLike implements IStory {
    public id: string;
    public name: string;
    public summary: string;
    public events: Array<__NAMESPACE__.IStoryEvent>;
    public atoms: Array<com_gu_contentatom_thrift.IAtom>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IStoryArgs) {
        super();
        if (args.id != null) {
            const value_10: string = args.id;
            this.id = value_10;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (args.name != null) {
            const value_11: string = args.name;
            this.name = value_11;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[name] is unset!");
        }
        if (args.summary != null) {
            const value_12: string = args.summary;
            this.summary = value_12;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[summary] is unset!");
        }
        if (args.events != null) {
            const value_13: Array<__NAMESPACE__.IStoryEvent> = new Array<__NAMESPACE__.IStoryEvent>();
            args.events.forEach((value_15: __NAMESPACE__.IStoryEventArgs): void => {
                const value_16: __NAMESPACE__.IStoryEvent = new __NAMESPACE__.StoryEvent(value_15);
                value_13.push(value_16);
            });
            this.events = value_13;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[events] is unset!");
        }
        if (args.atoms != null) {
            const value_14: Array<com_gu_contentatom_thrift.IAtom> = new Array<com_gu_contentatom_thrift.IAtom>();
            args.atoms.forEach((value_17: com_gu_contentatom_thrift.IAtomArgs): void => {
                const value_18: com_gu_contentatom_thrift.IAtom = new com_gu_contentatom_thrift.Atom(value_17);
                value_14.push(value_18);
            });
            this.atoms = value_14;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[atoms] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): Story {
        return new Story(StoryCodec.decode(input));
    }
    public static write(args: IStoryArgs, output: thrift.TProtocol): void {
        return StoryCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return StoryCodec.encode(this, output);
    }
}

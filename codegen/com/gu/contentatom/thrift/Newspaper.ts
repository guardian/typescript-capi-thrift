/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as __NAMESPACE__ from "./.";
export interface INewspaper {
    book: __NAMESPACE__.ITag;
    bookSection: __NAMESPACE__.ITag;
    publication: __NAMESPACE__.ITag;
}
export interface INewspaperArgs {
    book: __NAMESPACE__.ITagArgs;
    bookSection: __NAMESPACE__.ITagArgs;
    publication: __NAMESPACE__.ITagArgs;
}
export const NewspaperCodec: thrift.IStructCodec<INewspaperArgs, INewspaper> = {
    encode(args: INewspaperArgs, output: thrift.TProtocol): void {
        const obj = {
            book: args.book,
            bookSection: args.bookSection,
            publication: args.publication
        };
        output.writeStructBegin("Newspaper");
        if (obj.book != null) {
            output.writeFieldBegin("book", thrift.TType.STRUCT, 1);
            __NAMESPACE__.TagCodec.encode(obj.book, output);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[book] is unset!");
        }
        if (obj.bookSection != null) {
            output.writeFieldBegin("bookSection", thrift.TType.STRUCT, 2);
            __NAMESPACE__.TagCodec.encode(obj.bookSection, output);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[bookSection] is unset!");
        }
        if (obj.publication != null) {
            output.writeFieldBegin("publication", thrift.TType.STRUCT, 3);
            __NAMESPACE__.TagCodec.encode(obj.publication, output);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[publication] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): INewspaper {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_1: __NAMESPACE__.ITag = __NAMESPACE__.TagCodec.decode(input);
                        _args.book = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_2: __NAMESPACE__.ITag = __NAMESPACE__.TagCodec.decode(input);
                        _args.bookSection = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_3: __NAMESPACE__.ITag = __NAMESPACE__.TagCodec.decode(input);
                        _args.publication = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.book !== undefined && _args.bookSection !== undefined && _args.publication !== undefined) {
            return {
                book: _args.book,
                bookSection: _args.bookSection,
                publication: _args.publication
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read Newspaper from input");
        }
    }
};
export class Newspaper extends thrift.StructLike implements INewspaper {
    public book: __NAMESPACE__.ITag;
    public bookSection: __NAMESPACE__.ITag;
    public publication: __NAMESPACE__.ITag;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: INewspaperArgs) {
        super();
        if (args.book != null) {
            const value_4: __NAMESPACE__.ITag = new __NAMESPACE__.Tag(args.book);
            this.book = value_4;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[book] is unset!");
        }
        if (args.bookSection != null) {
            const value_5: __NAMESPACE__.ITag = new __NAMESPACE__.Tag(args.bookSection);
            this.bookSection = value_5;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[bookSection] is unset!");
        }
        if (args.publication != null) {
            const value_6: __NAMESPACE__.ITag = new __NAMESPACE__.Tag(args.publication);
            this.publication = value_6;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[publication] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): Newspaper {
        return new Newspaper(NewspaperCodec.decode(input));
    }
    public static write(args: INewspaperArgs, output: thrift.TProtocol): void {
        return NewspaperCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return NewspaperCodec.encode(this, output);
    }
}

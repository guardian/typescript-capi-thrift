/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as com_gu_contentatom_thrift from "./com/gu/contentatom/thrift";
import * as com_gu_story_model_v1 from "./com/gu/story/model/v1";
import * as __NAMESPACE__ from "./.";
export interface IItemResponse {
    status: string;
    userTier: string;
    total?: number;
    startIndex?: number;
    pageSize?: number;
    currentPage?: number;
    pages?: number;
    orderBy?: string;
    content?: __NAMESPACE__.IContent;
    tag?: __NAMESPACE__.ITag;
    edition?: __NAMESPACE__.IEdition;
    section?: __NAMESPACE__.ISection;
    results?: Array<__NAMESPACE__.IContent>;
    quiz?: com_gu_contentatom_thrift.IAtom;
    relatedContent?: Array<__NAMESPACE__.IContent>;
    storyPackage?: Array<__NAMESPACE__.IContent>;
    editorsPicks?: Array<__NAMESPACE__.IContent>;
    mostViewed?: Array<__NAMESPACE__.IContent>;
    leadContent?: Array<__NAMESPACE__.IContent>;
    packages?: Array<__NAMESPACE__.IPackage>;
    viewpoints?: Array<com_gu_contentatom_thrift.IAtom>;
    media?: com_gu_contentatom_thrift.IAtom;
    explainer?: com_gu_contentatom_thrift.IAtom;
    cta?: com_gu_contentatom_thrift.IAtom;
    interactive?: com_gu_contentatom_thrift.IAtom;
    review?: com_gu_contentatom_thrift.IAtom;
    recipe?: com_gu_contentatom_thrift.IAtom;
    storyquestions?: com_gu_contentatom_thrift.IAtom;
    story?: com_gu_story_model_v1.IStory;
    qanda?: com_gu_contentatom_thrift.IAtom;
    guide?: com_gu_contentatom_thrift.IAtom;
    profile?: com_gu_contentatom_thrift.IAtom;
    timeline?: com_gu_contentatom_thrift.IAtom;
    commonsdivision?: com_gu_contentatom_thrift.IAtom;
    chart?: com_gu_contentatom_thrift.IAtom;
    audio?: com_gu_contentatom_thrift.IAtom;
}
export interface IItemResponseArgs {
    status: string;
    userTier: string;
    total?: number;
    startIndex?: number;
    pageSize?: number;
    currentPage?: number;
    pages?: number;
    orderBy?: string;
    content?: __NAMESPACE__.IContentArgs;
    tag?: __NAMESPACE__.ITagArgs;
    edition?: __NAMESPACE__.IEditionArgs;
    section?: __NAMESPACE__.ISectionArgs;
    results?: Array<__NAMESPACE__.IContentArgs>;
    quiz?: com_gu_contentatom_thrift.IAtomArgs;
    relatedContent?: Array<__NAMESPACE__.IContentArgs>;
    storyPackage?: Array<__NAMESPACE__.IContentArgs>;
    editorsPicks?: Array<__NAMESPACE__.IContentArgs>;
    mostViewed?: Array<__NAMESPACE__.IContentArgs>;
    leadContent?: Array<__NAMESPACE__.IContentArgs>;
    packages?: Array<__NAMESPACE__.IPackageArgs>;
    viewpoints?: Array<com_gu_contentatom_thrift.IAtomArgs>;
    media?: com_gu_contentatom_thrift.IAtomArgs;
    explainer?: com_gu_contentatom_thrift.IAtomArgs;
    cta?: com_gu_contentatom_thrift.IAtomArgs;
    interactive?: com_gu_contentatom_thrift.IAtomArgs;
    review?: com_gu_contentatom_thrift.IAtomArgs;
    recipe?: com_gu_contentatom_thrift.IAtomArgs;
    storyquestions?: com_gu_contentatom_thrift.IAtomArgs;
    story?: com_gu_story_model_v1.IStoryArgs;
    qanda?: com_gu_contentatom_thrift.IAtomArgs;
    guide?: com_gu_contentatom_thrift.IAtomArgs;
    profile?: com_gu_contentatom_thrift.IAtomArgs;
    timeline?: com_gu_contentatom_thrift.IAtomArgs;
    commonsdivision?: com_gu_contentatom_thrift.IAtomArgs;
    chart?: com_gu_contentatom_thrift.IAtomArgs;
    audio?: com_gu_contentatom_thrift.IAtomArgs;
}
export const ItemResponseCodec: thrift.IStructCodec<IItemResponseArgs, IItemResponse> = {
    encode(args: IItemResponseArgs, output: thrift.TProtocol): void {
        const obj = {
            status: args.status,
            userTier: args.userTier,
            total: args.total,
            startIndex: args.startIndex,
            pageSize: args.pageSize,
            currentPage: args.currentPage,
            pages: args.pages,
            orderBy: args.orderBy,
            content: args.content,
            tag: args.tag,
            edition: args.edition,
            section: args.section,
            results: args.results,
            quiz: args.quiz,
            relatedContent: args.relatedContent,
            storyPackage: args.storyPackage,
            editorsPicks: args.editorsPicks,
            mostViewed: args.mostViewed,
            leadContent: args.leadContent,
            packages: args.packages,
            viewpoints: args.viewpoints,
            media: args.media,
            explainer: args.explainer,
            cta: args.cta,
            interactive: args.interactive,
            review: args.review,
            recipe: args.recipe,
            storyquestions: args.storyquestions,
            story: args.story,
            qanda: args.qanda,
            guide: args.guide,
            profile: args.profile,
            timeline: args.timeline,
            commonsdivision: args.commonsdivision,
            chart: args.chart,
            audio: args.audio
        };
        output.writeStructBegin("ItemResponse");
        if (obj.status != null) {
            output.writeFieldBegin("status", thrift.TType.STRING, 1);
            output.writeString(obj.status);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
        if (obj.userTier != null) {
            output.writeFieldBegin("userTier", thrift.TType.STRING, 2);
            output.writeString(obj.userTier);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[userTier] is unset!");
        }
        if (obj.total != null) {
            output.writeFieldBegin("total", thrift.TType.I32, 3);
            output.writeI32(obj.total);
            output.writeFieldEnd();
        }
        if (obj.startIndex != null) {
            output.writeFieldBegin("startIndex", thrift.TType.I32, 4);
            output.writeI32(obj.startIndex);
            output.writeFieldEnd();
        }
        if (obj.pageSize != null) {
            output.writeFieldBegin("pageSize", thrift.TType.I32, 5);
            output.writeI32(obj.pageSize);
            output.writeFieldEnd();
        }
        if (obj.currentPage != null) {
            output.writeFieldBegin("currentPage", thrift.TType.I32, 6);
            output.writeI32(obj.currentPage);
            output.writeFieldEnd();
        }
        if (obj.pages != null) {
            output.writeFieldBegin("pages", thrift.TType.I32, 7);
            output.writeI32(obj.pages);
            output.writeFieldEnd();
        }
        if (obj.orderBy != null) {
            output.writeFieldBegin("orderBy", thrift.TType.STRING, 8);
            output.writeString(obj.orderBy);
            output.writeFieldEnd();
        }
        if (obj.content != null) {
            output.writeFieldBegin("content", thrift.TType.STRUCT, 9);
            __NAMESPACE__.ContentCodec.encode(obj.content, output);
            output.writeFieldEnd();
        }
        if (obj.tag != null) {
            output.writeFieldBegin("tag", thrift.TType.STRUCT, 10);
            __NAMESPACE__.TagCodec.encode(obj.tag, output);
            output.writeFieldEnd();
        }
        if (obj.edition != null) {
            output.writeFieldBegin("edition", thrift.TType.STRUCT, 11);
            __NAMESPACE__.EditionCodec.encode(obj.edition, output);
            output.writeFieldEnd();
        }
        if (obj.section != null) {
            output.writeFieldBegin("section", thrift.TType.STRUCT, 12);
            __NAMESPACE__.SectionCodec.encode(obj.section, output);
            output.writeFieldEnd();
        }
        if (obj.results != null) {
            output.writeFieldBegin("results", thrift.TType.LIST, 13);
            output.writeListBegin(thrift.TType.STRUCT, obj.results.length);
            obj.results.forEach((value_1: __NAMESPACE__.IContentArgs): void => {
                __NAMESPACE__.ContentCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.quiz != null) {
            output.writeFieldBegin("quiz", thrift.TType.STRUCT, 14);
            com_gu_contentatom_thrift.AtomCodec.encode(obj.quiz, output);
            output.writeFieldEnd();
        }
        if (obj.relatedContent != null) {
            output.writeFieldBegin("relatedContent", thrift.TType.LIST, 15);
            output.writeListBegin(thrift.TType.STRUCT, obj.relatedContent.length);
            obj.relatedContent.forEach((value_2: __NAMESPACE__.IContentArgs): void => {
                __NAMESPACE__.ContentCodec.encode(value_2, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.storyPackage != null) {
            output.writeFieldBegin("storyPackage", thrift.TType.LIST, 16);
            output.writeListBegin(thrift.TType.STRUCT, obj.storyPackage.length);
            obj.storyPackage.forEach((value_3: __NAMESPACE__.IContentArgs): void => {
                __NAMESPACE__.ContentCodec.encode(value_3, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.editorsPicks != null) {
            output.writeFieldBegin("editorsPicks", thrift.TType.LIST, 17);
            output.writeListBegin(thrift.TType.STRUCT, obj.editorsPicks.length);
            obj.editorsPicks.forEach((value_4: __NAMESPACE__.IContentArgs): void => {
                __NAMESPACE__.ContentCodec.encode(value_4, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.mostViewed != null) {
            output.writeFieldBegin("mostViewed", thrift.TType.LIST, 18);
            output.writeListBegin(thrift.TType.STRUCT, obj.mostViewed.length);
            obj.mostViewed.forEach((value_5: __NAMESPACE__.IContentArgs): void => {
                __NAMESPACE__.ContentCodec.encode(value_5, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.leadContent != null) {
            output.writeFieldBegin("leadContent", thrift.TType.LIST, 19);
            output.writeListBegin(thrift.TType.STRUCT, obj.leadContent.length);
            obj.leadContent.forEach((value_6: __NAMESPACE__.IContentArgs): void => {
                __NAMESPACE__.ContentCodec.encode(value_6, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.packages != null) {
            output.writeFieldBegin("packages", thrift.TType.LIST, 20);
            output.writeListBegin(thrift.TType.STRUCT, obj.packages.length);
            obj.packages.forEach((value_7: __NAMESPACE__.IPackageArgs): void => {
                __NAMESPACE__.PackageCodec.encode(value_7, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.viewpoints != null) {
            output.writeFieldBegin("viewpoints", thrift.TType.LIST, 21);
            output.writeListBegin(thrift.TType.STRUCT, obj.viewpoints.length);
            obj.viewpoints.forEach((value_8: com_gu_contentatom_thrift.IAtomArgs): void => {
                com_gu_contentatom_thrift.AtomCodec.encode(value_8, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (obj.media != null) {
            output.writeFieldBegin("media", thrift.TType.STRUCT, 22);
            com_gu_contentatom_thrift.AtomCodec.encode(obj.media, output);
            output.writeFieldEnd();
        }
        if (obj.explainer != null) {
            output.writeFieldBegin("explainer", thrift.TType.STRUCT, 23);
            com_gu_contentatom_thrift.AtomCodec.encode(obj.explainer, output);
            output.writeFieldEnd();
        }
        if (obj.cta != null) {
            output.writeFieldBegin("cta", thrift.TType.STRUCT, 24);
            com_gu_contentatom_thrift.AtomCodec.encode(obj.cta, output);
            output.writeFieldEnd();
        }
        if (obj.interactive != null) {
            output.writeFieldBegin("interactive", thrift.TType.STRUCT, 25);
            com_gu_contentatom_thrift.AtomCodec.encode(obj.interactive, output);
            output.writeFieldEnd();
        }
        if (obj.review != null) {
            output.writeFieldBegin("review", thrift.TType.STRUCT, 26);
            com_gu_contentatom_thrift.AtomCodec.encode(obj.review, output);
            output.writeFieldEnd();
        }
        if (obj.recipe != null) {
            output.writeFieldBegin("recipe", thrift.TType.STRUCT, 27);
            com_gu_contentatom_thrift.AtomCodec.encode(obj.recipe, output);
            output.writeFieldEnd();
        }
        if (obj.storyquestions != null) {
            output.writeFieldBegin("storyquestions", thrift.TType.STRUCT, 28);
            com_gu_contentatom_thrift.AtomCodec.encode(obj.storyquestions, output);
            output.writeFieldEnd();
        }
        if (obj.story != null) {
            output.writeFieldBegin("story", thrift.TType.STRUCT, 29);
            com_gu_story_model_v1.StoryCodec.encode(obj.story, output);
            output.writeFieldEnd();
        }
        if (obj.qanda != null) {
            output.writeFieldBegin("qanda", thrift.TType.STRUCT, 30);
            com_gu_contentatom_thrift.AtomCodec.encode(obj.qanda, output);
            output.writeFieldEnd();
        }
        if (obj.guide != null) {
            output.writeFieldBegin("guide", thrift.TType.STRUCT, 31);
            com_gu_contentatom_thrift.AtomCodec.encode(obj.guide, output);
            output.writeFieldEnd();
        }
        if (obj.profile != null) {
            output.writeFieldBegin("profile", thrift.TType.STRUCT, 32);
            com_gu_contentatom_thrift.AtomCodec.encode(obj.profile, output);
            output.writeFieldEnd();
        }
        if (obj.timeline != null) {
            output.writeFieldBegin("timeline", thrift.TType.STRUCT, 33);
            com_gu_contentatom_thrift.AtomCodec.encode(obj.timeline, output);
            output.writeFieldEnd();
        }
        if (obj.commonsdivision != null) {
            output.writeFieldBegin("commonsdivision", thrift.TType.STRUCT, 34);
            com_gu_contentatom_thrift.AtomCodec.encode(obj.commonsdivision, output);
            output.writeFieldEnd();
        }
        if (obj.chart != null) {
            output.writeFieldBegin("chart", thrift.TType.STRUCT, 35);
            com_gu_contentatom_thrift.AtomCodec.encode(obj.chart, output);
            output.writeFieldEnd();
        }
        if (obj.audio != null) {
            output.writeFieldBegin("audio", thrift.TType.STRUCT, 36);
            com_gu_contentatom_thrift.AtomCodec.encode(obj.audio, output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IItemResponse {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_9: string = input.readString();
                        _args.status = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_10: string = input.readString();
                        _args.userTier = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I32) {
                        const value_11: number = input.readI32();
                        _args.total = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.I32) {
                        const value_12: number = input.readI32();
                        _args.startIndex = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.I32) {
                        const value_13: number = input.readI32();
                        _args.pageSize = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.I32) {
                        const value_14: number = input.readI32();
                        _args.currentPage = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.I32) {
                        const value_15: number = input.readI32();
                        _args.pages = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.STRING) {
                        const value_16: string = input.readString();
                        _args.orderBy = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_17: __NAMESPACE__.IContent = __NAMESPACE__.ContentCodec.decode(input);
                        _args.content = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_18: __NAMESPACE__.ITag = __NAMESPACE__.TagCodec.decode(input);
                        _args.tag = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_19: __NAMESPACE__.IEdition = __NAMESPACE__.EditionCodec.decode(input);
                        _args.edition = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_20: __NAMESPACE__.ISection = __NAMESPACE__.SectionCodec.decode(input);
                        _args.section = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.TType.LIST) {
                        const value_21: Array<__NAMESPACE__.IContent> = new Array<__NAMESPACE__.IContent>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_22: __NAMESPACE__.IContent = __NAMESPACE__.ContentCodec.decode(input);
                            value_21.push(value_22);
                        }
                        input.readListEnd();
                        _args.results = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_23: com_gu_contentatom_thrift.IAtom = com_gu_contentatom_thrift.AtomCodec.decode(input);
                        _args.quiz = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.TType.LIST) {
                        const value_24: Array<__NAMESPACE__.IContent> = new Array<__NAMESPACE__.IContent>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_25: __NAMESPACE__.IContent = __NAMESPACE__.ContentCodec.decode(input);
                            value_24.push(value_25);
                        }
                        input.readListEnd();
                        _args.relatedContent = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.TType.LIST) {
                        const value_26: Array<__NAMESPACE__.IContent> = new Array<__NAMESPACE__.IContent>();
                        const metadata_3: thrift.IThriftList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_27: __NAMESPACE__.IContent = __NAMESPACE__.ContentCodec.decode(input);
                            value_26.push(value_27);
                        }
                        input.readListEnd();
                        _args.storyPackage = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.TType.LIST) {
                        const value_28: Array<__NAMESPACE__.IContent> = new Array<__NAMESPACE__.IContent>();
                        const metadata_4: thrift.IThriftList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_29: __NAMESPACE__.IContent = __NAMESPACE__.ContentCodec.decode(input);
                            value_28.push(value_29);
                        }
                        input.readListEnd();
                        _args.editorsPicks = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.TType.LIST) {
                        const value_30: Array<__NAMESPACE__.IContent> = new Array<__NAMESPACE__.IContent>();
                        const metadata_5: thrift.IThriftList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_31: __NAMESPACE__.IContent = __NAMESPACE__.ContentCodec.decode(input);
                            value_30.push(value_31);
                        }
                        input.readListEnd();
                        _args.mostViewed = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.TType.LIST) {
                        const value_32: Array<__NAMESPACE__.IContent> = new Array<__NAMESPACE__.IContent>();
                        const metadata_6: thrift.IThriftList = input.readListBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_33: __NAMESPACE__.IContent = __NAMESPACE__.ContentCodec.decode(input);
                            value_32.push(value_33);
                        }
                        input.readListEnd();
                        _args.leadContent = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.TType.LIST) {
                        const value_34: Array<__NAMESPACE__.IPackage> = new Array<__NAMESPACE__.IPackage>();
                        const metadata_7: thrift.IThriftList = input.readListBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const value_35: __NAMESPACE__.IPackage = __NAMESPACE__.PackageCodec.decode(input);
                            value_34.push(value_35);
                        }
                        input.readListEnd();
                        _args.packages = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.TType.LIST) {
                        const value_36: Array<com_gu_contentatom_thrift.IAtom> = new Array<com_gu_contentatom_thrift.IAtom>();
                        const metadata_8: thrift.IThriftList = input.readListBegin();
                        const size_8: number = metadata_8.size;
                        for (let i_8: number = 0; i_8 < size_8; i_8++) {
                            const value_37: com_gu_contentatom_thrift.IAtom = com_gu_contentatom_thrift.AtomCodec.decode(input);
                            value_36.push(value_37);
                        }
                        input.readListEnd();
                        _args.viewpoints = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_38: com_gu_contentatom_thrift.IAtom = com_gu_contentatom_thrift.AtomCodec.decode(input);
                        _args.media = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_39: com_gu_contentatom_thrift.IAtom = com_gu_contentatom_thrift.AtomCodec.decode(input);
                        _args.explainer = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_40: com_gu_contentatom_thrift.IAtom = com_gu_contentatom_thrift.AtomCodec.decode(input);
                        _args.cta = value_40;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_41: com_gu_contentatom_thrift.IAtom = com_gu_contentatom_thrift.AtomCodec.decode(input);
                        _args.interactive = value_41;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 26:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_42: com_gu_contentatom_thrift.IAtom = com_gu_contentatom_thrift.AtomCodec.decode(input);
                        _args.review = value_42;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 27:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_43: com_gu_contentatom_thrift.IAtom = com_gu_contentatom_thrift.AtomCodec.decode(input);
                        _args.recipe = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 28:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_44: com_gu_contentatom_thrift.IAtom = com_gu_contentatom_thrift.AtomCodec.decode(input);
                        _args.storyquestions = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 29:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_45: com_gu_story_model_v1.IStory = com_gu_story_model_v1.StoryCodec.decode(input);
                        _args.story = value_45;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 30:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_46: com_gu_contentatom_thrift.IAtom = com_gu_contentatom_thrift.AtomCodec.decode(input);
                        _args.qanda = value_46;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 31:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_47: com_gu_contentatom_thrift.IAtom = com_gu_contentatom_thrift.AtomCodec.decode(input);
                        _args.guide = value_47;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 32:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_48: com_gu_contentatom_thrift.IAtom = com_gu_contentatom_thrift.AtomCodec.decode(input);
                        _args.profile = value_48;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 33:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_49: com_gu_contentatom_thrift.IAtom = com_gu_contentatom_thrift.AtomCodec.decode(input);
                        _args.timeline = value_49;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 34:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_50: com_gu_contentatom_thrift.IAtom = com_gu_contentatom_thrift.AtomCodec.decode(input);
                        _args.commonsdivision = value_50;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 35:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_51: com_gu_contentatom_thrift.IAtom = com_gu_contentatom_thrift.AtomCodec.decode(input);
                        _args.chart = value_51;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 36:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_52: com_gu_contentatom_thrift.IAtom = com_gu_contentatom_thrift.AtomCodec.decode(input);
                        _args.audio = value_52;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.status !== undefined && _args.userTier !== undefined) {
            return {
                status: _args.status,
                userTier: _args.userTier,
                total: _args.total,
                startIndex: _args.startIndex,
                pageSize: _args.pageSize,
                currentPage: _args.currentPage,
                pages: _args.pages,
                orderBy: _args.orderBy,
                content: _args.content,
                tag: _args.tag,
                edition: _args.edition,
                section: _args.section,
                results: _args.results,
                quiz: _args.quiz,
                relatedContent: _args.relatedContent,
                storyPackage: _args.storyPackage,
                editorsPicks: _args.editorsPicks,
                mostViewed: _args.mostViewed,
                leadContent: _args.leadContent,
                packages: _args.packages,
                viewpoints: _args.viewpoints,
                media: _args.media,
                explainer: _args.explainer,
                cta: _args.cta,
                interactive: _args.interactive,
                review: _args.review,
                recipe: _args.recipe,
                storyquestions: _args.storyquestions,
                story: _args.story,
                qanda: _args.qanda,
                guide: _args.guide,
                profile: _args.profile,
                timeline: _args.timeline,
                commonsdivision: _args.commonsdivision,
                chart: _args.chart,
                audio: _args.audio
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ItemResponse from input");
        }
    }
};
export class ItemResponse extends thrift.StructLike implements IItemResponse {
    public status: string;
    public userTier: string;
    public total?: number;
    public startIndex?: number;
    public pageSize?: number;
    public currentPage?: number;
    public pages?: number;
    public orderBy?: string;
    public content?: __NAMESPACE__.IContent;
    public tag?: __NAMESPACE__.ITag;
    public edition?: __NAMESPACE__.IEdition;
    public section?: __NAMESPACE__.ISection;
    public results?: Array<__NAMESPACE__.IContent>;
    public quiz?: com_gu_contentatom_thrift.IAtom;
    public relatedContent?: Array<__NAMESPACE__.IContent>;
    public storyPackage?: Array<__NAMESPACE__.IContent>;
    public editorsPicks?: Array<__NAMESPACE__.IContent>;
    public mostViewed?: Array<__NAMESPACE__.IContent>;
    public leadContent?: Array<__NAMESPACE__.IContent>;
    public packages?: Array<__NAMESPACE__.IPackage>;
    public viewpoints?: Array<com_gu_contentatom_thrift.IAtom>;
    public media?: com_gu_contentatom_thrift.IAtom;
    public explainer?: com_gu_contentatom_thrift.IAtom;
    public cta?: com_gu_contentatom_thrift.IAtom;
    public interactive?: com_gu_contentatom_thrift.IAtom;
    public review?: com_gu_contentatom_thrift.IAtom;
    public recipe?: com_gu_contentatom_thrift.IAtom;
    public storyquestions?: com_gu_contentatom_thrift.IAtom;
    public story?: com_gu_story_model_v1.IStory;
    public qanda?: com_gu_contentatom_thrift.IAtom;
    public guide?: com_gu_contentatom_thrift.IAtom;
    public profile?: com_gu_contentatom_thrift.IAtom;
    public timeline?: com_gu_contentatom_thrift.IAtom;
    public commonsdivision?: com_gu_contentatom_thrift.IAtom;
    public chart?: com_gu_contentatom_thrift.IAtom;
    public audio?: com_gu_contentatom_thrift.IAtom;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IItemResponseArgs) {
        super();
        if (args.status != null) {
            const value_53: string = args.status;
            this.status = value_53;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
        if (args.userTier != null) {
            const value_54: string = args.userTier;
            this.userTier = value_54;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[userTier] is unset!");
        }
        if (args.total != null) {
            const value_55: number = args.total;
            this.total = value_55;
        }
        if (args.startIndex != null) {
            const value_56: number = args.startIndex;
            this.startIndex = value_56;
        }
        if (args.pageSize != null) {
            const value_57: number = args.pageSize;
            this.pageSize = value_57;
        }
        if (args.currentPage != null) {
            const value_58: number = args.currentPage;
            this.currentPage = value_58;
        }
        if (args.pages != null) {
            const value_59: number = args.pages;
            this.pages = value_59;
        }
        if (args.orderBy != null) {
            const value_60: string = args.orderBy;
            this.orderBy = value_60;
        }
        if (args.content != null) {
            const value_61: __NAMESPACE__.IContent = new __NAMESPACE__.Content(args.content);
            this.content = value_61;
        }
        if (args.tag != null) {
            const value_62: __NAMESPACE__.ITag = new __NAMESPACE__.Tag(args.tag);
            this.tag = value_62;
        }
        if (args.edition != null) {
            const value_63: __NAMESPACE__.IEdition = new __NAMESPACE__.Edition(args.edition);
            this.edition = value_63;
        }
        if (args.section != null) {
            const value_64: __NAMESPACE__.ISection = new __NAMESPACE__.Section(args.section);
            this.section = value_64;
        }
        if (args.results != null) {
            const value_65: Array<__NAMESPACE__.IContent> = new Array<__NAMESPACE__.IContent>();
            args.results.forEach((value_89: __NAMESPACE__.IContentArgs): void => {
                const value_90: __NAMESPACE__.IContent = new __NAMESPACE__.Content(value_89);
                value_65.push(value_90);
            });
            this.results = value_65;
        }
        if (args.quiz != null) {
            const value_66: com_gu_contentatom_thrift.IAtom = new com_gu_contentatom_thrift.Atom(args.quiz);
            this.quiz = value_66;
        }
        if (args.relatedContent != null) {
            const value_67: Array<__NAMESPACE__.IContent> = new Array<__NAMESPACE__.IContent>();
            args.relatedContent.forEach((value_91: __NAMESPACE__.IContentArgs): void => {
                const value_92: __NAMESPACE__.IContent = new __NAMESPACE__.Content(value_91);
                value_67.push(value_92);
            });
            this.relatedContent = value_67;
        }
        if (args.storyPackage != null) {
            const value_68: Array<__NAMESPACE__.IContent> = new Array<__NAMESPACE__.IContent>();
            args.storyPackage.forEach((value_93: __NAMESPACE__.IContentArgs): void => {
                const value_94: __NAMESPACE__.IContent = new __NAMESPACE__.Content(value_93);
                value_68.push(value_94);
            });
            this.storyPackage = value_68;
        }
        if (args.editorsPicks != null) {
            const value_69: Array<__NAMESPACE__.IContent> = new Array<__NAMESPACE__.IContent>();
            args.editorsPicks.forEach((value_95: __NAMESPACE__.IContentArgs): void => {
                const value_96: __NAMESPACE__.IContent = new __NAMESPACE__.Content(value_95);
                value_69.push(value_96);
            });
            this.editorsPicks = value_69;
        }
        if (args.mostViewed != null) {
            const value_70: Array<__NAMESPACE__.IContent> = new Array<__NAMESPACE__.IContent>();
            args.mostViewed.forEach((value_97: __NAMESPACE__.IContentArgs): void => {
                const value_98: __NAMESPACE__.IContent = new __NAMESPACE__.Content(value_97);
                value_70.push(value_98);
            });
            this.mostViewed = value_70;
        }
        if (args.leadContent != null) {
            const value_71: Array<__NAMESPACE__.IContent> = new Array<__NAMESPACE__.IContent>();
            args.leadContent.forEach((value_99: __NAMESPACE__.IContentArgs): void => {
                const value_100: __NAMESPACE__.IContent = new __NAMESPACE__.Content(value_99);
                value_71.push(value_100);
            });
            this.leadContent = value_71;
        }
        if (args.packages != null) {
            const value_72: Array<__NAMESPACE__.IPackage> = new Array<__NAMESPACE__.IPackage>();
            args.packages.forEach((value_101: __NAMESPACE__.IPackageArgs): void => {
                const value_102: __NAMESPACE__.IPackage = new __NAMESPACE__.Package(value_101);
                value_72.push(value_102);
            });
            this.packages = value_72;
        }
        if (args.viewpoints != null) {
            const value_73: Array<com_gu_contentatom_thrift.IAtom> = new Array<com_gu_contentatom_thrift.IAtom>();
            args.viewpoints.forEach((value_103: com_gu_contentatom_thrift.IAtomArgs): void => {
                const value_104: com_gu_contentatom_thrift.IAtom = new com_gu_contentatom_thrift.Atom(value_103);
                value_73.push(value_104);
            });
            this.viewpoints = value_73;
        }
        if (args.media != null) {
            const value_74: com_gu_contentatom_thrift.IAtom = new com_gu_contentatom_thrift.Atom(args.media);
            this.media = value_74;
        }
        if (args.explainer != null) {
            const value_75: com_gu_contentatom_thrift.IAtom = new com_gu_contentatom_thrift.Atom(args.explainer);
            this.explainer = value_75;
        }
        if (args.cta != null) {
            const value_76: com_gu_contentatom_thrift.IAtom = new com_gu_contentatom_thrift.Atom(args.cta);
            this.cta = value_76;
        }
        if (args.interactive != null) {
            const value_77: com_gu_contentatom_thrift.IAtom = new com_gu_contentatom_thrift.Atom(args.interactive);
            this.interactive = value_77;
        }
        if (args.review != null) {
            const value_78: com_gu_contentatom_thrift.IAtom = new com_gu_contentatom_thrift.Atom(args.review);
            this.review = value_78;
        }
        if (args.recipe != null) {
            const value_79: com_gu_contentatom_thrift.IAtom = new com_gu_contentatom_thrift.Atom(args.recipe);
            this.recipe = value_79;
        }
        if (args.storyquestions != null) {
            const value_80: com_gu_contentatom_thrift.IAtom = new com_gu_contentatom_thrift.Atom(args.storyquestions);
            this.storyquestions = value_80;
        }
        if (args.story != null) {
            const value_81: com_gu_story_model_v1.IStory = new com_gu_story_model_v1.Story(args.story);
            this.story = value_81;
        }
        if (args.qanda != null) {
            const value_82: com_gu_contentatom_thrift.IAtom = new com_gu_contentatom_thrift.Atom(args.qanda);
            this.qanda = value_82;
        }
        if (args.guide != null) {
            const value_83: com_gu_contentatom_thrift.IAtom = new com_gu_contentatom_thrift.Atom(args.guide);
            this.guide = value_83;
        }
        if (args.profile != null) {
            const value_84: com_gu_contentatom_thrift.IAtom = new com_gu_contentatom_thrift.Atom(args.profile);
            this.profile = value_84;
        }
        if (args.timeline != null) {
            const value_85: com_gu_contentatom_thrift.IAtom = new com_gu_contentatom_thrift.Atom(args.timeline);
            this.timeline = value_85;
        }
        if (args.commonsdivision != null) {
            const value_86: com_gu_contentatom_thrift.IAtom = new com_gu_contentatom_thrift.Atom(args.commonsdivision);
            this.commonsdivision = value_86;
        }
        if (args.chart != null) {
            const value_87: com_gu_contentatom_thrift.IAtom = new com_gu_contentatom_thrift.Atom(args.chart);
            this.chart = value_87;
        }
        if (args.audio != null) {
            const value_88: com_gu_contentatom_thrift.IAtom = new com_gu_contentatom_thrift.Atom(args.audio);
            this.audio = value_88;
        }
    }
    public static read(input: thrift.TProtocol): ItemResponse {
        return new ItemResponse(ItemResponseCodec.decode(input));
    }
    public static write(args: IItemResponseArgs, output: thrift.TProtocol): void {
        return ItemResponseCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return ItemResponseCodec.encode(this, output);
    }
}

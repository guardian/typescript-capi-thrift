/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import * as thrift from '@creditkarma/thrift-server-core';
import * as __NAMESPACE__ from './.';
export interface IRemovedContent {
  id: string;
  lastModified: __NAMESPACE__.ICapiDateTime;
}
export interface IRemovedContentArgs {
  id: string;
  lastModified: __NAMESPACE__.ICapiDateTimeArgs;
}
export const RemovedContentCodec: thrift.IStructCodec<
  IRemovedContentArgs,
  IRemovedContent
> = {
  encode(args: IRemovedContentArgs, output: thrift.TProtocol): void {
    const obj = {
      id: args.id,
      lastModified: args.lastModified,
    };
    output.writeStructBegin('RemovedContent');
    if (obj.id != null) {
      output.writeFieldBegin('id', thrift.TType.STRING, 1);
      output.writeString(obj.id);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[id] is unset!'
      );
    }
    if (obj.lastModified != null) {
      output.writeFieldBegin('lastModified', thrift.TType.STRUCT, 2);
      __NAMESPACE__.CapiDateTimeCodec.encode(obj.lastModified, output);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[lastModified] is unset!'
      );
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  },
  decode(input: thrift.TProtocol): IRemovedContent {
    let _args: any = {};
    input.readStructBegin();
    while (true) {
      const ret: thrift.IThriftField = input.readFieldBegin();
      const fieldType: thrift.TType = ret.fieldType;
      const fieldId: number = ret.fieldId;
      if (fieldType === thrift.TType.STOP) {
        break;
      }
      switch (fieldId) {
        case 1:
          if (fieldType === thrift.TType.STRING) {
            const value_1: string = input.readString();
            _args.id = value_1;
          } else {
            input.skip(fieldType);
          }
          break;
        case 2:
          if (fieldType === thrift.TType.STRUCT) {
            const value_2: __NAMESPACE__.ICapiDateTime = __NAMESPACE__.CapiDateTimeCodec.decode(
              input
            );
            _args.lastModified = value_2;
          } else {
            input.skip(fieldType);
          }
          break;
        default: {
          input.skip(fieldType);
        }
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    if (_args.id !== undefined && _args.lastModified !== undefined) {
      return {
        id: _args.id,
        lastModified: _args.lastModified,
      };
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Unable to read RemovedContent from input'
      );
    }
  },
};
export class RemovedContent extends thrift.StructLike
  implements IRemovedContent {
  public id: string;
  public lastModified: __NAMESPACE__.ICapiDateTime;
  public readonly _annotations: thrift.IThriftAnnotations = {};
  public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
  constructor(args: IRemovedContentArgs) {
    super();
    if (args.id != null) {
      const value_3: string = args.id;
      this.id = value_3;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[id] is unset!'
      );
    }
    if (args.lastModified != null) {
      const value_4: __NAMESPACE__.ICapiDateTime = new __NAMESPACE__.CapiDateTime(
        args.lastModified
      );
      this.lastModified = value_4;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[lastModified] is unset!'
      );
    }
  }
  public static read(input: thrift.TProtocol): RemovedContent {
    return new RemovedContent(RemovedContentCodec.decode(input));
  }
  public static write(
    args: IRemovedContentArgs,
    output: thrift.TProtocol
  ): void {
    return RemovedContentCodec.encode(args, output);
  }
  public write(output: thrift.TProtocol): void {
    return RemovedContentCodec.encode(this, output);
  }
}

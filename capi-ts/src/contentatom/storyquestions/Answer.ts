/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import * as thrift from '@creditkarma/thrift-server-core';
import * as __NAMESPACE__ from './.';
export interface IAnswer {
  answerId: string;
  answerType: __NAMESPACE__.AnswerType;
}
export interface IAnswerArgs {
  answerId: string;
  answerType: __NAMESPACE__.AnswerType;
}
export const AnswerCodec: thrift.IStructCodec<IAnswerArgs, IAnswer> = {
  encode(args: IAnswerArgs, output: thrift.TProtocol): void {
    const obj = {
      answerId: args.answerId,
      answerType: args.answerType,
    };
    output.writeStructBegin('Answer');
    if (obj.answerId != null) {
      output.writeFieldBegin('answerId', thrift.TType.STRING, 1);
      output.writeString(obj.answerId);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[answerId] is unset!'
      );
    }
    if (obj.answerType != null) {
      output.writeFieldBegin('answerType', thrift.TType.I32, 2);
      output.writeI32(obj.answerType);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[answerType] is unset!'
      );
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  },
  decode(input: thrift.TProtocol): IAnswer {
    let _args: any = {};
    input.readStructBegin();
    while (true) {
      const ret: thrift.IThriftField = input.readFieldBegin();
      const fieldType: thrift.TType = ret.fieldType;
      const fieldId: number = ret.fieldId;
      if (fieldType === thrift.TType.STOP) {
        break;
      }
      switch (fieldId) {
        case 1:
          if (fieldType === thrift.TType.STRING) {
            const value_1: string = input.readString();
            _args.answerId = value_1;
          } else {
            input.skip(fieldType);
          }
          break;
        case 2:
          if (fieldType === thrift.TType.I32) {
            const value_2: __NAMESPACE__.AnswerType = input.readI32();
            _args.answerType = value_2;
          } else {
            input.skip(fieldType);
          }
          break;
        default: {
          input.skip(fieldType);
        }
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    if (_args.answerId !== undefined && _args.answerType !== undefined) {
      return {
        answerId: _args.answerId,
        answerType: _args.answerType,
      };
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Unable to read Answer from input'
      );
    }
  },
};
export class Answer extends thrift.StructLike implements IAnswer {
  public answerId: string;
  public answerType: __NAMESPACE__.AnswerType;
  public readonly _annotations: thrift.IThriftAnnotations = {};
  public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
  constructor(args: IAnswerArgs) {
    super();
    if (args.answerId != null) {
      const value_3: string = args.answerId;
      this.answerId = value_3;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[answerId] is unset!'
      );
    }
    if (args.answerType != null) {
      const value_4: __NAMESPACE__.AnswerType = args.answerType;
      this.answerType = value_4;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[answerType] is unset!'
      );
    }
  }
  public static read(input: thrift.TProtocol): Answer {
    return new Answer(AnswerCodec.decode(input));
  }
  public static write(args: IAnswerArgs, output: thrift.TProtocol): void {
    return AnswerCodec.encode(args, output);
  }
  public write(output: thrift.TProtocol): void {
    return AnswerCodec.encode(this, output);
  }
}

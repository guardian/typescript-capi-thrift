/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import * as thrift from '@creditkarma/thrift-server-core';
import * as __NAMESPACE__ from './.';
export interface IVotes {
  ayes: Array<__NAMESPACE__.IMP>;
  noes: Array<__NAMESPACE__.IMP>;
}
export interface IVotesArgs {
  ayes: Array<__NAMESPACE__.IMPArgs>;
  noes: Array<__NAMESPACE__.IMPArgs>;
}
export const VotesCodec: thrift.IStructCodec<IVotesArgs, IVotes> = {
  encode(args: IVotesArgs, output: thrift.TProtocol): void {
    const obj = {
      ayes: args.ayes,
      noes: args.noes,
    };
    output.writeStructBegin('Votes');
    if (obj.ayes != null) {
      output.writeFieldBegin('ayes', thrift.TType.LIST, 1);
      output.writeListBegin(thrift.TType.STRUCT, obj.ayes.length);
      obj.ayes.forEach(
        (value_1: __NAMESPACE__.IMPArgs): void => {
          __NAMESPACE__.MPCodec.encode(value_1, output);
        }
      );
      output.writeListEnd();
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[ayes] is unset!'
      );
    }
    if (obj.noes != null) {
      output.writeFieldBegin('noes', thrift.TType.LIST, 2);
      output.writeListBegin(thrift.TType.STRUCT, obj.noes.length);
      obj.noes.forEach(
        (value_2: __NAMESPACE__.IMPArgs): void => {
          __NAMESPACE__.MPCodec.encode(value_2, output);
        }
      );
      output.writeListEnd();
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[noes] is unset!'
      );
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  },
  decode(input: thrift.TProtocol): IVotes {
    let _args: any = {};
    input.readStructBegin();
    while (true) {
      const ret: thrift.IThriftField = input.readFieldBegin();
      const fieldType: thrift.TType = ret.fieldType;
      const fieldId: number = ret.fieldId;
      if (fieldType === thrift.TType.STOP) {
        break;
      }
      switch (fieldId) {
        case 1:
          if (fieldType === thrift.TType.LIST) {
            const value_3: Array<__NAMESPACE__.IMP> = new Array<
              __NAMESPACE__.IMP
            >();
            const metadata_1: thrift.IThriftList = input.readListBegin();
            const size_1: number = metadata_1.size;
            for (let i_1: number = 0; i_1 < size_1; i_1++) {
              const value_4: __NAMESPACE__.IMP = __NAMESPACE__.MPCodec.decode(
                input
              );
              value_3.push(value_4);
            }
            input.readListEnd();
            _args.ayes = value_3;
          } else {
            input.skip(fieldType);
          }
          break;
        case 2:
          if (fieldType === thrift.TType.LIST) {
            const value_5: Array<__NAMESPACE__.IMP> = new Array<
              __NAMESPACE__.IMP
            >();
            const metadata_2: thrift.IThriftList = input.readListBegin();
            const size_2: number = metadata_2.size;
            for (let i_2: number = 0; i_2 < size_2; i_2++) {
              const value_6: __NAMESPACE__.IMP = __NAMESPACE__.MPCodec.decode(
                input
              );
              value_5.push(value_6);
            }
            input.readListEnd();
            _args.noes = value_5;
          } else {
            input.skip(fieldType);
          }
          break;
        default: {
          input.skip(fieldType);
        }
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    if (_args.ayes !== undefined && _args.noes !== undefined) {
      return {
        ayes: _args.ayes,
        noes: _args.noes,
      };
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Unable to read Votes from input'
      );
    }
  },
};
export class Votes extends thrift.StructLike implements IVotes {
  public ayes: Array<__NAMESPACE__.IMP>;
  public noes: Array<__NAMESPACE__.IMP>;
  public readonly _annotations: thrift.IThriftAnnotations = {};
  public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
  constructor(args: IVotesArgs) {
    super();
    if (args.ayes != null) {
      const value_7: Array<__NAMESPACE__.IMP> = new Array<__NAMESPACE__.IMP>();
      args.ayes.forEach(
        (value_9: __NAMESPACE__.IMPArgs): void => {
          const value_10: __NAMESPACE__.IMP = new __NAMESPACE__.MP(value_9);
          value_7.push(value_10);
        }
      );
      this.ayes = value_7;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[ayes] is unset!'
      );
    }
    if (args.noes != null) {
      const value_8: Array<__NAMESPACE__.IMP> = new Array<__NAMESPACE__.IMP>();
      args.noes.forEach(
        (value_11: __NAMESPACE__.IMPArgs): void => {
          const value_12: __NAMESPACE__.IMP = new __NAMESPACE__.MP(value_11);
          value_8.push(value_12);
        }
      );
      this.noes = value_8;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[noes] is unset!'
      );
    }
  }
  public static read(input: thrift.TProtocol): Votes {
    return new Votes(VotesCodec.decode(input));
  }
  public static write(args: IVotesArgs, output: thrift.TProtocol): void {
    return VotesCodec.encode(args, output);
  }
  public write(output: thrift.TProtocol): void {
    return VotesCodec.encode(this, output);
  }
}

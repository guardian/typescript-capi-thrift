/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import * as thrift from '@creditkarma/thrift-server-core';
import * as __NAMESPACE__ from './.';
export interface IResultGroups {
  groups: Array<__NAMESPACE__.IResultGroup>;
}
export interface IResultGroupsArgs {
  groups: Array<__NAMESPACE__.IResultGroupArgs>;
}
export const ResultGroupsCodec: thrift.IStructCodec<
  IResultGroupsArgs,
  IResultGroups
> = {
  encode(args: IResultGroupsArgs, output: thrift.TProtocol): void {
    const obj = {
      groups: args.groups,
    };
    output.writeStructBegin('ResultGroups');
    if (obj.groups != null) {
      output.writeFieldBegin('groups', thrift.TType.LIST, 1);
      output.writeListBegin(thrift.TType.STRUCT, obj.groups.length);
      obj.groups.forEach(
        (value_1: __NAMESPACE__.IResultGroupArgs): void => {
          __NAMESPACE__.ResultGroupCodec.encode(value_1, output);
        }
      );
      output.writeListEnd();
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[groups] is unset!'
      );
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  },
  decode(input: thrift.TProtocol): IResultGroups {
    let _args: any = {};
    input.readStructBegin();
    while (true) {
      const ret: thrift.IThriftField = input.readFieldBegin();
      const fieldType: thrift.TType = ret.fieldType;
      const fieldId: number = ret.fieldId;
      if (fieldType === thrift.TType.STOP) {
        break;
      }
      switch (fieldId) {
        case 1:
          if (fieldType === thrift.TType.LIST) {
            const value_2: Array<__NAMESPACE__.IResultGroup> = new Array<
              __NAMESPACE__.IResultGroup
            >();
            const metadata_1: thrift.IThriftList = input.readListBegin();
            const size_1: number = metadata_1.size;
            for (let i_1: number = 0; i_1 < size_1; i_1++) {
              const value_3: __NAMESPACE__.IResultGroup = __NAMESPACE__.ResultGroupCodec.decode(
                input
              );
              value_2.push(value_3);
            }
            input.readListEnd();
            _args.groups = value_2;
          } else {
            input.skip(fieldType);
          }
          break;
        default: {
          input.skip(fieldType);
        }
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    if (_args.groups !== undefined) {
      return {
        groups: _args.groups,
      };
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Unable to read ResultGroups from input'
      );
    }
  },
};
export class ResultGroups extends thrift.StructLike implements IResultGroups {
  public groups: Array<__NAMESPACE__.IResultGroup>;
  public readonly _annotations: thrift.IThriftAnnotations = {};
  public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
  constructor(args: IResultGroupsArgs) {
    super();
    if (args.groups != null) {
      const value_4: Array<__NAMESPACE__.IResultGroup> = new Array<
        __NAMESPACE__.IResultGroup
      >();
      args.groups.forEach(
        (value_5: __NAMESPACE__.IResultGroupArgs): void => {
          const value_6: __NAMESPACE__.IResultGroup = new __NAMESPACE__.ResultGroup(
            value_5
          );
          value_4.push(value_6);
        }
      );
      this.groups = value_4;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[groups] is unset!'
      );
    }
  }
  public static read(input: thrift.TProtocol): ResultGroups {
    return new ResultGroups(ResultGroupsCodec.decode(input));
  }
  public static write(args: IResultGroupsArgs, output: thrift.TProtocol): void {
    return ResultGroupsCodec.encode(args, output);
  }
  public write(output: thrift.TProtocol): void {
    return ResultGroupsCodec.encode(this, output);
  }
}

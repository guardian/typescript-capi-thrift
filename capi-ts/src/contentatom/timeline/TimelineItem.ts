/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import * as thrift from '@creditkarma/thrift-server-core';
import * as com_gu_contententity_thrift from './../../com/gu/contententity/thrift';
export interface ITimelineItem {
  title: string;
  body?: string;
  entities?: Array<com_gu_contententity_thrift.IEntity>;
  dateFormat?: string;
  toDate?: thrift.Int64;
}
export interface ITimelineItemArgs {
  title: string;
  body?: string;
  entities?: Array<com_gu_contententity_thrift.IEntityArgs>;
  dateFormat?: string;
  toDate?: number | string | thrift.Int64;
}
export const TimelineItemCodec: thrift.IStructCodec<
  ITimelineItemArgs,
  ITimelineItem
> = {
  encode(args: ITimelineItemArgs, output: thrift.TProtocol): void {
    const obj = {
      title: args.title,
      body: args.body,
      entities: args.entities,
      dateFormat: args.dateFormat,
      toDate:
        typeof args.toDate === 'number'
          ? new thrift.Int64(args.toDate)
          : typeof args.toDate === 'string'
          ? thrift.Int64.fromDecimalString(args.toDate)
          : args.toDate,
    };
    output.writeStructBegin('TimelineItem');
    if (obj.title != null) {
      output.writeFieldBegin('title', thrift.TType.STRING, 1);
      output.writeString(obj.title);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[title] is unset!'
      );
    }
    if (obj.body != null) {
      output.writeFieldBegin('body', thrift.TType.STRING, 3);
      output.writeString(obj.body);
      output.writeFieldEnd();
    }
    if (obj.entities != null) {
      output.writeFieldBegin('entities', thrift.TType.LIST, 4);
      output.writeListBegin(thrift.TType.STRUCT, obj.entities.length);
      obj.entities.forEach(
        (value_1: com_gu_contententity_thrift.IEntityArgs): void => {
          com_gu_contententity_thrift.EntityCodec.encode(value_1, output);
        }
      );
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (obj.dateFormat != null) {
      output.writeFieldBegin('dateFormat', thrift.TType.STRING, 5);
      output.writeString(obj.dateFormat);
      output.writeFieldEnd();
    }
    if (obj.toDate != null) {
      output.writeFieldBegin('toDate', thrift.TType.I64, 6);
      output.writeI64(
        typeof obj.toDate === 'number'
          ? new thrift.Int64(obj.toDate)
          : typeof obj.toDate === 'string'
          ? thrift.Int64.fromDecimalString(obj.toDate)
          : obj.toDate
      );
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  },
  decode(input: thrift.TProtocol): ITimelineItem {
    let _args: any = {};
    input.readStructBegin();
    while (true) {
      const ret: thrift.IThriftField = input.readFieldBegin();
      const fieldType: thrift.TType = ret.fieldType;
      const fieldId: number = ret.fieldId;
      if (fieldType === thrift.TType.STOP) {
        break;
      }
      switch (fieldId) {
        case 1:
          if (fieldType === thrift.TType.STRING) {
            const value_2: string = input.readString();
            _args.title = value_2;
          } else {
            input.skip(fieldType);
          }
          break;
        case 3:
          if (fieldType === thrift.TType.STRING) {
            const value_3: string = input.readString();
            _args.body = value_3;
          } else {
            input.skip(fieldType);
          }
          break;
        case 4:
          if (fieldType === thrift.TType.LIST) {
            const value_4: Array<
              com_gu_contententity_thrift.IEntity
            > = new Array<com_gu_contententity_thrift.IEntity>();
            const metadata_1: thrift.IThriftList = input.readListBegin();
            const size_1: number = metadata_1.size;
            for (let i_1: number = 0; i_1 < size_1; i_1++) {
              const value_5: com_gu_contententity_thrift.IEntity = com_gu_contententity_thrift.EntityCodec.decode(
                input
              );
              value_4.push(value_5);
            }
            input.readListEnd();
            _args.entities = value_4;
          } else {
            input.skip(fieldType);
          }
          break;
        case 5:
          if (fieldType === thrift.TType.STRING) {
            const value_6: string = input.readString();
            _args.dateFormat = value_6;
          } else {
            input.skip(fieldType);
          }
          break;
        case 6:
          if (fieldType === thrift.TType.I64) {
            const value_7: thrift.Int64 = input.readI64();
            _args.toDate = value_7;
          } else {
            input.skip(fieldType);
          }
          break;
        default: {
          input.skip(fieldType);
        }
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    if (_args.title !== undefined) {
      return {
        title: _args.title,
        body: _args.body,
        entities: _args.entities,
        dateFormat: _args.dateFormat,
        toDate: _args.toDate,
      };
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Unable to read TimelineItem from input'
      );
    }
  },
};
export class TimelineItem extends thrift.StructLike implements ITimelineItem {
  public title: string;
  public body?: string;
  public entities?: Array<com_gu_contententity_thrift.IEntity>;
  public dateFormat?: string;
  public toDate?: thrift.Int64;
  public readonly _annotations: thrift.IThriftAnnotations = {};
  public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
  constructor(args: ITimelineItemArgs) {
    super();
    if (args.title != null) {
      const value_8: string = args.title;
      this.title = value_8;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[title] is unset!'
      );
    }
    if (args.body != null) {
      const value_9: string = args.body;
      this.body = value_9;
    }
    if (args.entities != null) {
      const value_10: Array<com_gu_contententity_thrift.IEntity> = new Array<
        com_gu_contententity_thrift.IEntity
      >();
      args.entities.forEach(
        (value_13: com_gu_contententity_thrift.IEntityArgs): void => {
          const value_14: com_gu_contententity_thrift.IEntity = new com_gu_contententity_thrift.Entity(
            value_13
          );
          value_10.push(value_14);
        }
      );
      this.entities = value_10;
    }
    if (args.dateFormat != null) {
      const value_11: string = args.dateFormat;
      this.dateFormat = value_11;
    }
    if (args.toDate != null) {
      const value_12: thrift.Int64 =
        typeof args.toDate === 'number'
          ? new thrift.Int64(args.toDate)
          : typeof args.toDate === 'string'
          ? thrift.Int64.fromDecimalString(args.toDate)
          : args.toDate;
      this.toDate = value_12;
    }
  }
  public static read(input: thrift.TProtocol): TimelineItem {
    return new TimelineItem(TimelineItemCodec.decode(input));
  }
  public static write(args: ITimelineItemArgs, output: thrift.TProtocol): void {
    return TimelineItemCodec.encode(args, output);
  }
  public write(output: thrift.TProtocol): void {
    return TimelineItemCodec.encode(this, output);
  }
}

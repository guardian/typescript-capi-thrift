/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import * as thrift from '@creditkarma/thrift-server-core';
import * as __NAMESPACE__ from './.';
export interface IBlock {
  id: string;
  bodyHtml: string;
  bodyTextSummary: string;
  title?: string;
  attributes: __NAMESPACE__.IBlockAttributes;
  published: boolean;
  createdDate?: __NAMESPACE__.ICapiDateTime;
  firstPublishedDate?: __NAMESPACE__.ICapiDateTime;
  publishedDate?: __NAMESPACE__.ICapiDateTime;
  lastModifiedDate?: __NAMESPACE__.ICapiDateTime;
  contributors: Array<string>;
  createdBy?: __NAMESPACE__.IUser;
  lastModifiedBy?: __NAMESPACE__.IUser;
  elements: Array<__NAMESPACE__.IBlockElement>;
}
export interface IBlockArgs {
  id: string;
  bodyHtml: string;
  bodyTextSummary: string;
  title?: string;
  attributes: __NAMESPACE__.IBlockAttributesArgs;
  published: boolean;
  createdDate?: __NAMESPACE__.ICapiDateTimeArgs;
  firstPublishedDate?: __NAMESPACE__.ICapiDateTimeArgs;
  publishedDate?: __NAMESPACE__.ICapiDateTimeArgs;
  lastModifiedDate?: __NAMESPACE__.ICapiDateTimeArgs;
  contributors: Array<string>;
  createdBy?: __NAMESPACE__.IUserArgs;
  lastModifiedBy?: __NAMESPACE__.IUserArgs;
  elements?: Array<__NAMESPACE__.IBlockElementArgs>;
}
export const BlockCodec: thrift.IStructCodec<IBlockArgs, IBlock> = {
  encode(args: IBlockArgs, output: thrift.TProtocol): void {
    const obj = {
      id: args.id,
      bodyHtml: args.bodyHtml,
      bodyTextSummary: args.bodyTextSummary,
      title: args.title,
      attributes: args.attributes,
      published: args.published,
      createdDate: args.createdDate,
      firstPublishedDate: args.firstPublishedDate,
      publishedDate: args.publishedDate,
      lastModifiedDate: args.lastModifiedDate,
      contributors: args.contributors,
      createdBy: args.createdBy,
      lastModifiedBy: args.lastModifiedBy,
      elements: args.elements != null ? args.elements : [],
    };
    output.writeStructBegin('Block');
    if (obj.id != null) {
      output.writeFieldBegin('id', thrift.TType.STRING, 1);
      output.writeString(obj.id);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[id] is unset!'
      );
    }
    if (obj.bodyHtml != null) {
      output.writeFieldBegin('bodyHtml', thrift.TType.STRING, 2);
      output.writeString(obj.bodyHtml);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[bodyHtml] is unset!'
      );
    }
    if (obj.bodyTextSummary != null) {
      output.writeFieldBegin('bodyTextSummary', thrift.TType.STRING, 3);
      output.writeString(obj.bodyTextSummary);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[bodyTextSummary] is unset!'
      );
    }
    if (obj.title != null) {
      output.writeFieldBegin('title', thrift.TType.STRING, 4);
      output.writeString(obj.title);
      output.writeFieldEnd();
    }
    if (obj.attributes != null) {
      output.writeFieldBegin('attributes', thrift.TType.STRUCT, 5);
      __NAMESPACE__.BlockAttributesCodec.encode(obj.attributes, output);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[attributes] is unset!'
      );
    }
    if (obj.published != null) {
      output.writeFieldBegin('published', thrift.TType.BOOL, 6);
      output.writeBool(obj.published);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[published] is unset!'
      );
    }
    if (obj.createdDate != null) {
      output.writeFieldBegin('createdDate', thrift.TType.STRUCT, 7);
      __NAMESPACE__.CapiDateTimeCodec.encode(obj.createdDate, output);
      output.writeFieldEnd();
    }
    if (obj.firstPublishedDate != null) {
      output.writeFieldBegin('firstPublishedDate', thrift.TType.STRUCT, 8);
      __NAMESPACE__.CapiDateTimeCodec.encode(obj.firstPublishedDate, output);
      output.writeFieldEnd();
    }
    if (obj.publishedDate != null) {
      output.writeFieldBegin('publishedDate', thrift.TType.STRUCT, 9);
      __NAMESPACE__.CapiDateTimeCodec.encode(obj.publishedDate, output);
      output.writeFieldEnd();
    }
    if (obj.lastModifiedDate != null) {
      output.writeFieldBegin('lastModifiedDate', thrift.TType.STRUCT, 10);
      __NAMESPACE__.CapiDateTimeCodec.encode(obj.lastModifiedDate, output);
      output.writeFieldEnd();
    }
    if (obj.contributors != null) {
      output.writeFieldBegin('contributors', thrift.TType.LIST, 11);
      output.writeListBegin(thrift.TType.STRING, obj.contributors.length);
      obj.contributors.forEach(
        (value_1: string): void => {
          output.writeString(value_1);
        }
      );
      output.writeListEnd();
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[contributors] is unset!'
      );
    }
    if (obj.createdBy != null) {
      output.writeFieldBegin('createdBy', thrift.TType.STRUCT, 12);
      __NAMESPACE__.UserCodec.encode(obj.createdBy, output);
      output.writeFieldEnd();
    }
    if (obj.lastModifiedBy != null) {
      output.writeFieldBegin('lastModifiedBy', thrift.TType.STRUCT, 13);
      __NAMESPACE__.UserCodec.encode(obj.lastModifiedBy, output);
      output.writeFieldEnd();
    }
    if (obj.elements != null) {
      output.writeFieldBegin('elements', thrift.TType.LIST, 14);
      output.writeListBegin(thrift.TType.STRUCT, obj.elements.length);
      obj.elements.forEach(
        (value_2: __NAMESPACE__.IBlockElementArgs): void => {
          __NAMESPACE__.BlockElementCodec.encode(value_2, output);
        }
      );
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  },
  decode(input: thrift.TProtocol): IBlock {
    let _args: any = {};
    input.readStructBegin();
    while (true) {
      const ret: thrift.IThriftField = input.readFieldBegin();
      const fieldType: thrift.TType = ret.fieldType;
      const fieldId: number = ret.fieldId;
      if (fieldType === thrift.TType.STOP) {
        break;
      }
      switch (fieldId) {
        case 1:
          if (fieldType === thrift.TType.STRING) {
            const value_3: string = input.readString();
            _args.id = value_3;
          } else {
            input.skip(fieldType);
          }
          break;
        case 2:
          if (fieldType === thrift.TType.STRING) {
            const value_4: string = input.readString();
            _args.bodyHtml = value_4;
          } else {
            input.skip(fieldType);
          }
          break;
        case 3:
          if (fieldType === thrift.TType.STRING) {
            const value_5: string = input.readString();
            _args.bodyTextSummary = value_5;
          } else {
            input.skip(fieldType);
          }
          break;
        case 4:
          if (fieldType === thrift.TType.STRING) {
            const value_6: string = input.readString();
            _args.title = value_6;
          } else {
            input.skip(fieldType);
          }
          break;
        case 5:
          if (fieldType === thrift.TType.STRUCT) {
            const value_7: __NAMESPACE__.IBlockAttributes = __NAMESPACE__.BlockAttributesCodec.decode(
              input
            );
            _args.attributes = value_7;
          } else {
            input.skip(fieldType);
          }
          break;
        case 6:
          if (fieldType === thrift.TType.BOOL) {
            const value_8: boolean = input.readBool();
            _args.published = value_8;
          } else {
            input.skip(fieldType);
          }
          break;
        case 7:
          if (fieldType === thrift.TType.STRUCT) {
            const value_9: __NAMESPACE__.ICapiDateTime = __NAMESPACE__.CapiDateTimeCodec.decode(
              input
            );
            _args.createdDate = value_9;
          } else {
            input.skip(fieldType);
          }
          break;
        case 8:
          if (fieldType === thrift.TType.STRUCT) {
            const value_10: __NAMESPACE__.ICapiDateTime = __NAMESPACE__.CapiDateTimeCodec.decode(
              input
            );
            _args.firstPublishedDate = value_10;
          } else {
            input.skip(fieldType);
          }
          break;
        case 9:
          if (fieldType === thrift.TType.STRUCT) {
            const value_11: __NAMESPACE__.ICapiDateTime = __NAMESPACE__.CapiDateTimeCodec.decode(
              input
            );
            _args.publishedDate = value_11;
          } else {
            input.skip(fieldType);
          }
          break;
        case 10:
          if (fieldType === thrift.TType.STRUCT) {
            const value_12: __NAMESPACE__.ICapiDateTime = __NAMESPACE__.CapiDateTimeCodec.decode(
              input
            );
            _args.lastModifiedDate = value_12;
          } else {
            input.skip(fieldType);
          }
          break;
        case 11:
          if (fieldType === thrift.TType.LIST) {
            const value_13: Array<string> = new Array<string>();
            const metadata_1: thrift.IThriftList = input.readListBegin();
            const size_1: number = metadata_1.size;
            for (let i_1: number = 0; i_1 < size_1; i_1++) {
              const value_14: string = input.readString();
              value_13.push(value_14);
            }
            input.readListEnd();
            _args.contributors = value_13;
          } else {
            input.skip(fieldType);
          }
          break;
        case 12:
          if (fieldType === thrift.TType.STRUCT) {
            const value_15: __NAMESPACE__.IUser = __NAMESPACE__.UserCodec.decode(
              input
            );
            _args.createdBy = value_15;
          } else {
            input.skip(fieldType);
          }
          break;
        case 13:
          if (fieldType === thrift.TType.STRUCT) {
            const value_16: __NAMESPACE__.IUser = __NAMESPACE__.UserCodec.decode(
              input
            );
            _args.lastModifiedBy = value_16;
          } else {
            input.skip(fieldType);
          }
          break;
        case 14:
          if (fieldType === thrift.TType.LIST) {
            const value_17: Array<__NAMESPACE__.IBlockElement> = new Array<
              __NAMESPACE__.IBlockElement
            >();
            const metadata_2: thrift.IThriftList = input.readListBegin();
            const size_2: number = metadata_2.size;
            for (let i_2: number = 0; i_2 < size_2; i_2++) {
              const value_18: __NAMESPACE__.IBlockElement = __NAMESPACE__.BlockElementCodec.decode(
                input
              );
              value_17.push(value_18);
            }
            input.readListEnd();
            _args.elements = value_17;
          } else {
            input.skip(fieldType);
          }
          break;
        default: {
          input.skip(fieldType);
        }
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    if (
      _args.id !== undefined &&
      _args.bodyHtml !== undefined &&
      _args.bodyTextSummary !== undefined &&
      _args.attributes !== undefined &&
      _args.published !== undefined &&
      _args.contributors !== undefined &&
      _args.elements !== undefined
    ) {
      return {
        id: _args.id,
        bodyHtml: _args.bodyHtml,
        bodyTextSummary: _args.bodyTextSummary,
        title: _args.title,
        attributes: _args.attributes,
        published: _args.published,
        createdDate: _args.createdDate,
        firstPublishedDate: _args.firstPublishedDate,
        publishedDate: _args.publishedDate,
        lastModifiedDate: _args.lastModifiedDate,
        contributors: _args.contributors,
        createdBy: _args.createdBy,
        lastModifiedBy: _args.lastModifiedBy,
        elements: _args.elements != null ? _args.elements : [],
      };
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Unable to read Block from input'
      );
    }
  },
};
export class Block extends thrift.StructLike implements IBlock {
  public id: string;
  public bodyHtml: string;
  public bodyTextSummary: string;
  public title?: string;
  public attributes: __NAMESPACE__.IBlockAttributes;
  public published: boolean;
  public createdDate?: __NAMESPACE__.ICapiDateTime;
  public firstPublishedDate?: __NAMESPACE__.ICapiDateTime;
  public publishedDate?: __NAMESPACE__.ICapiDateTime;
  public lastModifiedDate?: __NAMESPACE__.ICapiDateTime;
  public contributors: Array<string>;
  public createdBy?: __NAMESPACE__.IUser;
  public lastModifiedBy?: __NAMESPACE__.IUser;
  public elements: Array<__NAMESPACE__.IBlockElement> = [];
  public readonly _annotations: thrift.IThriftAnnotations = {};
  public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
  constructor(args: IBlockArgs) {
    super();
    if (args.id != null) {
      const value_19: string = args.id;
      this.id = value_19;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[id] is unset!'
      );
    }
    if (args.bodyHtml != null) {
      const value_20: string = args.bodyHtml;
      this.bodyHtml = value_20;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[bodyHtml] is unset!'
      );
    }
    if (args.bodyTextSummary != null) {
      const value_21: string = args.bodyTextSummary;
      this.bodyTextSummary = value_21;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[bodyTextSummary] is unset!'
      );
    }
    if (args.title != null) {
      const value_22: string = args.title;
      this.title = value_22;
    }
    if (args.attributes != null) {
      const value_23: __NAMESPACE__.IBlockAttributes = new __NAMESPACE__.BlockAttributes(
        args.attributes
      );
      this.attributes = value_23;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[attributes] is unset!'
      );
    }
    if (args.published != null) {
      const value_24: boolean = args.published;
      this.published = value_24;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[published] is unset!'
      );
    }
    if (args.createdDate != null) {
      const value_25: __NAMESPACE__.ICapiDateTime = new __NAMESPACE__.CapiDateTime(
        args.createdDate
      );
      this.createdDate = value_25;
    }
    if (args.firstPublishedDate != null) {
      const value_26: __NAMESPACE__.ICapiDateTime = new __NAMESPACE__.CapiDateTime(
        args.firstPublishedDate
      );
      this.firstPublishedDate = value_26;
    }
    if (args.publishedDate != null) {
      const value_27: __NAMESPACE__.ICapiDateTime = new __NAMESPACE__.CapiDateTime(
        args.publishedDate
      );
      this.publishedDate = value_27;
    }
    if (args.lastModifiedDate != null) {
      const value_28: __NAMESPACE__.ICapiDateTime = new __NAMESPACE__.CapiDateTime(
        args.lastModifiedDate
      );
      this.lastModifiedDate = value_28;
    }
    if (args.contributors != null) {
      const value_29: Array<string> = new Array<string>();
      args.contributors.forEach(
        (value_33: string): void => {
          const value_34: string = value_33;
          value_29.push(value_34);
        }
      );
      this.contributors = value_29;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[contributors] is unset!'
      );
    }
    if (args.createdBy != null) {
      const value_30: __NAMESPACE__.IUser = new __NAMESPACE__.User(
        args.createdBy
      );
      this.createdBy = value_30;
    }
    if (args.lastModifiedBy != null) {
      const value_31: __NAMESPACE__.IUser = new __NAMESPACE__.User(
        args.lastModifiedBy
      );
      this.lastModifiedBy = value_31;
    }
    if (args.elements != null) {
      const value_32: Array<__NAMESPACE__.IBlockElement> = new Array<
        __NAMESPACE__.IBlockElement
      >();
      args.elements.forEach(
        (value_35: __NAMESPACE__.IBlockElementArgs): void => {
          const value_36: __NAMESPACE__.IBlockElement = new __NAMESPACE__.BlockElement(
            value_35
          );
          value_32.push(value_36);
        }
      );
      this.elements = value_32;
    }
  }
  public static read(input: thrift.TProtocol): Block {
    return new Block(BlockCodec.decode(input));
  }
  public static write(args: IBlockArgs, output: thrift.TProtocol): void {
    return BlockCodec.encode(args, output);
  }
  public write(output: thrift.TProtocol): void {
    return BlockCodec.encode(this, output);
  }
}

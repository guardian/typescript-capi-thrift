/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import * as thrift from '@creditkarma/thrift-server-core';
import * as __NAMESPACE__ from './.';
export interface IRemovedContentResponse {
  status: string;
  userTier: string;
  total: number;
  startIndex: number;
  pageSize: number;
  currentPage: number;
  pages: number;
  orderBy: string;
  results: Array<string>;
  resultsWithLastModified?: Array<__NAMESPACE__.IRemovedContent>;
}
export interface IRemovedContentResponseArgs {
  status: string;
  userTier: string;
  total: number;
  startIndex: number;
  pageSize: number;
  currentPage: number;
  pages: number;
  orderBy: string;
  results: Array<string>;
  resultsWithLastModified?: Array<__NAMESPACE__.IRemovedContentArgs>;
}
export const RemovedContentResponseCodec: thrift.IStructCodec<
  IRemovedContentResponseArgs,
  IRemovedContentResponse
> = {
  encode(args: IRemovedContentResponseArgs, output: thrift.TProtocol): void {
    const obj = {
      status: args.status,
      userTier: args.userTier,
      total: args.total,
      startIndex: args.startIndex,
      pageSize: args.pageSize,
      currentPage: args.currentPage,
      pages: args.pages,
      orderBy: args.orderBy,
      results: args.results,
      resultsWithLastModified: args.resultsWithLastModified,
    };
    output.writeStructBegin('RemovedContentResponse');
    if (obj.status != null) {
      output.writeFieldBegin('status', thrift.TType.STRING, 1);
      output.writeString(obj.status);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[status] is unset!'
      );
    }
    if (obj.userTier != null) {
      output.writeFieldBegin('userTier', thrift.TType.STRING, 2);
      output.writeString(obj.userTier);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[userTier] is unset!'
      );
    }
    if (obj.total != null) {
      output.writeFieldBegin('total', thrift.TType.I32, 3);
      output.writeI32(obj.total);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[total] is unset!'
      );
    }
    if (obj.startIndex != null) {
      output.writeFieldBegin('startIndex', thrift.TType.I32, 4);
      output.writeI32(obj.startIndex);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[startIndex] is unset!'
      );
    }
    if (obj.pageSize != null) {
      output.writeFieldBegin('pageSize', thrift.TType.I32, 5);
      output.writeI32(obj.pageSize);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[pageSize] is unset!'
      );
    }
    if (obj.currentPage != null) {
      output.writeFieldBegin('currentPage', thrift.TType.I32, 6);
      output.writeI32(obj.currentPage);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[currentPage] is unset!'
      );
    }
    if (obj.pages != null) {
      output.writeFieldBegin('pages', thrift.TType.I32, 7);
      output.writeI32(obj.pages);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[pages] is unset!'
      );
    }
    if (obj.orderBy != null) {
      output.writeFieldBegin('orderBy', thrift.TType.STRING, 8);
      output.writeString(obj.orderBy);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[orderBy] is unset!'
      );
    }
    if (obj.results != null) {
      output.writeFieldBegin('results', thrift.TType.LIST, 9);
      output.writeListBegin(thrift.TType.STRING, obj.results.length);
      obj.results.forEach(
        (value_1: string): void => {
          output.writeString(value_1);
        }
      );
      output.writeListEnd();
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[results] is unset!'
      );
    }
    if (obj.resultsWithLastModified != null) {
      output.writeFieldBegin('resultsWithLastModified', thrift.TType.LIST, 10);
      output.writeListBegin(
        thrift.TType.STRUCT,
        obj.resultsWithLastModified.length
      );
      obj.resultsWithLastModified.forEach(
        (value_2: __NAMESPACE__.IRemovedContentArgs): void => {
          __NAMESPACE__.RemovedContentCodec.encode(value_2, output);
        }
      );
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  },
  decode(input: thrift.TProtocol): IRemovedContentResponse {
    let _args: any = {};
    input.readStructBegin();
    while (true) {
      const ret: thrift.IThriftField = input.readFieldBegin();
      const fieldType: thrift.TType = ret.fieldType;
      const fieldId: number = ret.fieldId;
      if (fieldType === thrift.TType.STOP) {
        break;
      }
      switch (fieldId) {
        case 1:
          if (fieldType === thrift.TType.STRING) {
            const value_3: string = input.readString();
            _args.status = value_3;
          } else {
            input.skip(fieldType);
          }
          break;
        case 2:
          if (fieldType === thrift.TType.STRING) {
            const value_4: string = input.readString();
            _args.userTier = value_4;
          } else {
            input.skip(fieldType);
          }
          break;
        case 3:
          if (fieldType === thrift.TType.I32) {
            const value_5: number = input.readI32();
            _args.total = value_5;
          } else {
            input.skip(fieldType);
          }
          break;
        case 4:
          if (fieldType === thrift.TType.I32) {
            const value_6: number = input.readI32();
            _args.startIndex = value_6;
          } else {
            input.skip(fieldType);
          }
          break;
        case 5:
          if (fieldType === thrift.TType.I32) {
            const value_7: number = input.readI32();
            _args.pageSize = value_7;
          } else {
            input.skip(fieldType);
          }
          break;
        case 6:
          if (fieldType === thrift.TType.I32) {
            const value_8: number = input.readI32();
            _args.currentPage = value_8;
          } else {
            input.skip(fieldType);
          }
          break;
        case 7:
          if (fieldType === thrift.TType.I32) {
            const value_9: number = input.readI32();
            _args.pages = value_9;
          } else {
            input.skip(fieldType);
          }
          break;
        case 8:
          if (fieldType === thrift.TType.STRING) {
            const value_10: string = input.readString();
            _args.orderBy = value_10;
          } else {
            input.skip(fieldType);
          }
          break;
        case 9:
          if (fieldType === thrift.TType.LIST) {
            const value_11: Array<string> = new Array<string>();
            const metadata_1: thrift.IThriftList = input.readListBegin();
            const size_1: number = metadata_1.size;
            for (let i_1: number = 0; i_1 < size_1; i_1++) {
              const value_12: string = input.readString();
              value_11.push(value_12);
            }
            input.readListEnd();
            _args.results = value_11;
          } else {
            input.skip(fieldType);
          }
          break;
        case 10:
          if (fieldType === thrift.TType.LIST) {
            const value_13: Array<__NAMESPACE__.IRemovedContent> = new Array<
              __NAMESPACE__.IRemovedContent
            >();
            const metadata_2: thrift.IThriftList = input.readListBegin();
            const size_2: number = metadata_2.size;
            for (let i_2: number = 0; i_2 < size_2; i_2++) {
              const value_14: __NAMESPACE__.IRemovedContent = __NAMESPACE__.RemovedContentCodec.decode(
                input
              );
              value_13.push(value_14);
            }
            input.readListEnd();
            _args.resultsWithLastModified = value_13;
          } else {
            input.skip(fieldType);
          }
          break;
        default: {
          input.skip(fieldType);
        }
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    if (
      _args.status !== undefined &&
      _args.userTier !== undefined &&
      _args.total !== undefined &&
      _args.startIndex !== undefined &&
      _args.pageSize !== undefined &&
      _args.currentPage !== undefined &&
      _args.pages !== undefined &&
      _args.orderBy !== undefined &&
      _args.results !== undefined
    ) {
      return {
        status: _args.status,
        userTier: _args.userTier,
        total: _args.total,
        startIndex: _args.startIndex,
        pageSize: _args.pageSize,
        currentPage: _args.currentPage,
        pages: _args.pages,
        orderBy: _args.orderBy,
        results: _args.results,
        resultsWithLastModified: _args.resultsWithLastModified,
      };
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Unable to read RemovedContentResponse from input'
      );
    }
  },
};
export class RemovedContentResponse extends thrift.StructLike
  implements IRemovedContentResponse {
  public status: string;
  public userTier: string;
  public total: number;
  public startIndex: number;
  public pageSize: number;
  public currentPage: number;
  public pages: number;
  public orderBy: string;
  public results: Array<string>;
  public resultsWithLastModified?: Array<__NAMESPACE__.IRemovedContent>;
  public readonly _annotations: thrift.IThriftAnnotations = {};
  public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
  constructor(args: IRemovedContentResponseArgs) {
    super();
    if (args.status != null) {
      const value_15: string = args.status;
      this.status = value_15;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[status] is unset!'
      );
    }
    if (args.userTier != null) {
      const value_16: string = args.userTier;
      this.userTier = value_16;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[userTier] is unset!'
      );
    }
    if (args.total != null) {
      const value_17: number = args.total;
      this.total = value_17;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[total] is unset!'
      );
    }
    if (args.startIndex != null) {
      const value_18: number = args.startIndex;
      this.startIndex = value_18;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[startIndex] is unset!'
      );
    }
    if (args.pageSize != null) {
      const value_19: number = args.pageSize;
      this.pageSize = value_19;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[pageSize] is unset!'
      );
    }
    if (args.currentPage != null) {
      const value_20: number = args.currentPage;
      this.currentPage = value_20;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[currentPage] is unset!'
      );
    }
    if (args.pages != null) {
      const value_21: number = args.pages;
      this.pages = value_21;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[pages] is unset!'
      );
    }
    if (args.orderBy != null) {
      const value_22: string = args.orderBy;
      this.orderBy = value_22;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[orderBy] is unset!'
      );
    }
    if (args.results != null) {
      const value_23: Array<string> = new Array<string>();
      args.results.forEach(
        (value_25: string): void => {
          const value_26: string = value_25;
          value_23.push(value_26);
        }
      );
      this.results = value_23;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[results] is unset!'
      );
    }
    if (args.resultsWithLastModified != null) {
      const value_24: Array<__NAMESPACE__.IRemovedContent> = new Array<
        __NAMESPACE__.IRemovedContent
      >();
      args.resultsWithLastModified.forEach(
        (value_27: __NAMESPACE__.IRemovedContentArgs): void => {
          const value_28: __NAMESPACE__.IRemovedContent = new __NAMESPACE__.RemovedContent(
            value_27
          );
          value_24.push(value_28);
        }
      );
      this.resultsWithLastModified = value_24;
    }
  }
  public static read(input: thrift.TProtocol): RemovedContentResponse {
    return new RemovedContentResponse(
      RemovedContentResponseCodec.decode(input)
    );
  }
  public static write(
    args: IRemovedContentResponseArgs,
    output: thrift.TProtocol
  ): void {
    return RemovedContentResponseCodec.encode(args, output);
  }
  public write(output: thrift.TProtocol): void {
    return RemovedContentResponseCodec.encode(this, output);
  }
}

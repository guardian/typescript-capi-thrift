/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import * as thrift from '@creditkarma/thrift-server-core';
import * as __NAMESPACE__ from './.';
export interface IOphanStoryQuestionsResponse {
  status: string;
  pathToAtomIds: Array<__NAMESPACE__.IPathAndStoryQuestionsAtomId>;
}
export interface IOphanStoryQuestionsResponseArgs {
  status: string;
  pathToAtomIds: Array<__NAMESPACE__.IPathAndStoryQuestionsAtomIdArgs>;
}
export const OphanStoryQuestionsResponseCodec: thrift.IStructCodec<
  IOphanStoryQuestionsResponseArgs,
  IOphanStoryQuestionsResponse
> = {
  encode(
    args: IOphanStoryQuestionsResponseArgs,
    output: thrift.TProtocol
  ): void {
    const obj = {
      status: args.status,
      pathToAtomIds: args.pathToAtomIds,
    };
    output.writeStructBegin('OphanStoryQuestionsResponse');
    if (obj.status != null) {
      output.writeFieldBegin('status', thrift.TType.STRING, 1);
      output.writeString(obj.status);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[status] is unset!'
      );
    }
    if (obj.pathToAtomIds != null) {
      output.writeFieldBegin('pathToAtomIds', thrift.TType.LIST, 2);
      output.writeListBegin(thrift.TType.STRUCT, obj.pathToAtomIds.length);
      obj.pathToAtomIds.forEach(
        (value_1: __NAMESPACE__.IPathAndStoryQuestionsAtomIdArgs): void => {
          __NAMESPACE__.PathAndStoryQuestionsAtomIdCodec.encode(
            value_1,
            output
          );
        }
      );
      output.writeListEnd();
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[pathToAtomIds] is unset!'
      );
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  },
  decode(input: thrift.TProtocol): IOphanStoryQuestionsResponse {
    let _args: any = {};
    input.readStructBegin();
    while (true) {
      const ret: thrift.IThriftField = input.readFieldBegin();
      const fieldType: thrift.TType = ret.fieldType;
      const fieldId: number = ret.fieldId;
      if (fieldType === thrift.TType.STOP) {
        break;
      }
      switch (fieldId) {
        case 1:
          if (fieldType === thrift.TType.STRING) {
            const value_2: string = input.readString();
            _args.status = value_2;
          } else {
            input.skip(fieldType);
          }
          break;
        case 2:
          if (fieldType === thrift.TType.LIST) {
            const value_3: Array<
              __NAMESPACE__.IPathAndStoryQuestionsAtomId
            > = new Array<__NAMESPACE__.IPathAndStoryQuestionsAtomId>();
            const metadata_1: thrift.IThriftList = input.readListBegin();
            const size_1: number = metadata_1.size;
            for (let i_1: number = 0; i_1 < size_1; i_1++) {
              const value_4: __NAMESPACE__.IPathAndStoryQuestionsAtomId = __NAMESPACE__.PathAndStoryQuestionsAtomIdCodec.decode(
                input
              );
              value_3.push(value_4);
            }
            input.readListEnd();
            _args.pathToAtomIds = value_3;
          } else {
            input.skip(fieldType);
          }
          break;
        default: {
          input.skip(fieldType);
        }
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    if (_args.status !== undefined && _args.pathToAtomIds !== undefined) {
      return {
        status: _args.status,
        pathToAtomIds: _args.pathToAtomIds,
      };
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Unable to read OphanStoryQuestionsResponse from input'
      );
    }
  },
};
export class OphanStoryQuestionsResponse extends thrift.StructLike
  implements IOphanStoryQuestionsResponse {
  public status: string;
  public pathToAtomIds: Array<__NAMESPACE__.IPathAndStoryQuestionsAtomId>;
  public readonly _annotations: thrift.IThriftAnnotations = {};
  public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
  constructor(args: IOphanStoryQuestionsResponseArgs) {
    super();
    if (args.status != null) {
      const value_5: string = args.status;
      this.status = value_5;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[status] is unset!'
      );
    }
    if (args.pathToAtomIds != null) {
      const value_6: Array<
        __NAMESPACE__.IPathAndStoryQuestionsAtomId
      > = new Array<__NAMESPACE__.IPathAndStoryQuestionsAtomId>();
      args.pathToAtomIds.forEach(
        (value_7: __NAMESPACE__.IPathAndStoryQuestionsAtomIdArgs): void => {
          const value_8: __NAMESPACE__.IPathAndStoryQuestionsAtomId = new __NAMESPACE__.PathAndStoryQuestionsAtomId(
            value_7
          );
          value_6.push(value_8);
        }
      );
      this.pathToAtomIds = value_6;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[pathToAtomIds] is unset!'
      );
    }
  }
  public static read(input: thrift.TProtocol): OphanStoryQuestionsResponse {
    return new OphanStoryQuestionsResponse(
      OphanStoryQuestionsResponseCodec.decode(input)
    );
  }
  public static write(
    args: IOphanStoryQuestionsResponseArgs,
    output: thrift.TProtocol
  ): void {
    return OphanStoryQuestionsResponseCodec.encode(args, output);
  }
  public write(output: thrift.TProtocol): void {
    return OphanStoryQuestionsResponseCodec.encode(this, output);
  }
}

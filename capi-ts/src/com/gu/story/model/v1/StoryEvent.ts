/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
import * as Content from "./Content";
export interface IStoryEvent {
    id: string;
    name: string;
    summary: string;
    content: Array<Content.IContent>;
}
export interface IStoryEventArgs {
    id: string;
    name: string;
    summary: string;
    content: Array<Content.IContentArgs>;
}
export const StoryEventCodec: thrift.IStructCodec<IStoryEventArgs, IStoryEvent> = {
    encode(args: IStoryEventArgs, output: thrift.TProtocol): void {
        const obj: any = {
            id: args.id,
            name: args.name,
            summary: args.summary,
            content: args.content
        };
        output.writeStructBegin("StoryEvent");
        if (obj.id != null) {
            output.writeFieldBegin("id", thrift.TType.STRING, 1);
            output.writeString(obj.id);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (obj.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 2);
            output.writeString(obj.name);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[name] is unset!");
        }
        if (obj.summary != null) {
            output.writeFieldBegin("summary", thrift.TType.STRING, 3);
            output.writeString(obj.summary);
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[summary] is unset!");
        }
        if (obj.content != null) {
            output.writeFieldBegin("content", thrift.TType.LIST, 4);
            output.writeListBegin(thrift.TType.STRUCT, obj.content.length);
            obj.content.forEach((value_1: Content.IContentArgs): void => {
                Content.ContentCodec.encode(value_1, output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[content] is unset!");
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    },
    decode(input: thrift.TProtocol): IStoryEvent {
        let _args: any = {};
        input.readStructBegin();
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_2: string = input.readString();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.name = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_4: string = input.readString();
                        _args.summary = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.LIST) {
                        const value_5: Array<Content.IContent> = new Array<Content.IContent>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: Content.IContent = Content.ContentCodec.decode(input);
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.content = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.id !== undefined && _args.name !== undefined && _args.summary !== undefined && _args.content !== undefined) {
            return {
                id: _args.id,
                name: _args.name,
                summary: _args.summary,
                content: _args.content
            };
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Unable to read StoryEvent from input");
        }
    }
};
export class StoryEvent extends thrift.StructLike implements IStoryEvent {
    public id: string;
    public name: string;
    public summary: string;
    public content: Array<Content.IContent>;
    public readonly _annotations: thrift.IThriftAnnotations = {};
    public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
    constructor(args: IStoryEventArgs) {
        super();
        if (args.id != null) {
            const value_7: string = args.id;
            this.id = value_7;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[id] is unset!");
        }
        if (args.name != null) {
            const value_8: string = args.name;
            this.name = value_8;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[name] is unset!");
        }
        if (args.summary != null) {
            const value_9: string = args.summary;
            this.summary = value_9;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[summary] is unset!");
        }
        if (args.content != null) {
            const value_10: Array<Content.IContent> = new Array<Content.IContent>();
            args.content.forEach((value_11: Content.IContentArgs): void => {
                const value_12: Content.IContent = new Content.Content(value_11);
                value_10.push(value_12);
            });
            this.content = value_10;
        }
        else {
            throw new thrift.TProtocolException(thrift.TProtocolExceptionType.UNKNOWN, "Required field[content] is unset!");
        }
    }
    public static read(input: thrift.TProtocol): StoryEvent {
        return new StoryEvent(StoryEventCodec.decode(input));
    }
    public static write(args: IStoryEventArgs, output: thrift.TProtocol): void {
        return StoryEventCodec.encode(args, output);
    }
    public write(output: thrift.TProtocol): void {
        return StoryEventCodec.encode(this, output);
    }
}

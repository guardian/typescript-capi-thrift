/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import * as thrift from '@creditkarma/thrift-server-core';
import * as com_gu_contententity_thrift_entity_person from './entity/person';
import * as com_gu_contententity_thrift_entity_film from './entity/film';
import * as com_gu_contententity_thrift_entity_game from './entity/game';
import * as com_gu_contententity_thrift_entity_restaurant from './entity/restaurant';
import * as com_gu_contententity_thrift_entity_place from './entity/place';
import * as com_gu_contententity_thrift_entity_organisation from './entity/organisation';
import * as __NAMESPACE__ from './.';
export interface IEntity {
  id: string;
  entityType: __NAMESPACE__.EntityType;
  googleId?: string;
  person?: com_gu_contententity_thrift_entity_person.IPerson;
  film?: com_gu_contententity_thrift_entity_film.IFilm;
  game?: com_gu_contententity_thrift_entity_game.IGame;
  restaurant?: com_gu_contententity_thrift_entity_restaurant.IRestaurant;
  place?: com_gu_contententity_thrift_entity_place.IPlace;
  organisation?: com_gu_contententity_thrift_entity_organisation.IOrganisation;
}
export interface IEntityArgs {
  id: string;
  entityType: __NAMESPACE__.EntityType;
  googleId?: string;
  person?: com_gu_contententity_thrift_entity_person.IPersonArgs;
  film?: com_gu_contententity_thrift_entity_film.IFilmArgs;
  game?: com_gu_contententity_thrift_entity_game.IGameArgs;
  restaurant?: com_gu_contententity_thrift_entity_restaurant.IRestaurantArgs;
  place?: com_gu_contententity_thrift_entity_place.IPlaceArgs;
  organisation?: com_gu_contententity_thrift_entity_organisation.IOrganisationArgs;
}
export const EntityCodec: thrift.IStructCodec<IEntityArgs, IEntity> = {
  encode(args: IEntityArgs, output: thrift.TProtocol): void {
    const obj = {
      id: args.id,
      entityType: args.entityType,
      googleId: args.googleId,
      person: args.person,
      film: args.film,
      game: args.game,
      restaurant: args.restaurant,
      place: args.place,
      organisation: args.organisation,
    };
    output.writeStructBegin('Entity');
    if (obj.id != null) {
      output.writeFieldBegin('id', thrift.TType.STRING, 1);
      output.writeString(obj.id);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[id] is unset!'
      );
    }
    if (obj.entityType != null) {
      output.writeFieldBegin('entityType', thrift.TType.I32, 2);
      output.writeI32(obj.entityType);
      output.writeFieldEnd();
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[entityType] is unset!'
      );
    }
    if (obj.googleId != null) {
      output.writeFieldBegin('googleId', thrift.TType.STRING, 3);
      output.writeString(obj.googleId);
      output.writeFieldEnd();
    }
    if (obj.person != null) {
      output.writeFieldBegin('person', thrift.TType.STRUCT, 4);
      com_gu_contententity_thrift_entity_person.PersonCodec.encode(
        obj.person,
        output
      );
      output.writeFieldEnd();
    }
    if (obj.film != null) {
      output.writeFieldBegin('film', thrift.TType.STRUCT, 5);
      com_gu_contententity_thrift_entity_film.FilmCodec.encode(
        obj.film,
        output
      );
      output.writeFieldEnd();
    }
    if (obj.game != null) {
      output.writeFieldBegin('game', thrift.TType.STRUCT, 6);
      com_gu_contententity_thrift_entity_game.GameCodec.encode(
        obj.game,
        output
      );
      output.writeFieldEnd();
    }
    if (obj.restaurant != null) {
      output.writeFieldBegin('restaurant', thrift.TType.STRUCT, 7);
      com_gu_contententity_thrift_entity_restaurant.RestaurantCodec.encode(
        obj.restaurant,
        output
      );
      output.writeFieldEnd();
    }
    if (obj.place != null) {
      output.writeFieldBegin('place', thrift.TType.STRUCT, 8);
      com_gu_contententity_thrift_entity_place.PlaceCodec.encode(
        obj.place,
        output
      );
      output.writeFieldEnd();
    }
    if (obj.organisation != null) {
      output.writeFieldBegin('organisation', thrift.TType.STRUCT, 9);
      com_gu_contententity_thrift_entity_organisation.OrganisationCodec.encode(
        obj.organisation,
        output
      );
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  },
  decode(input: thrift.TProtocol): IEntity {
    let _args: any = {};
    input.readStructBegin();
    while (true) {
      const ret: thrift.IThriftField = input.readFieldBegin();
      const fieldType: thrift.TType = ret.fieldType;
      const fieldId: number = ret.fieldId;
      if (fieldType === thrift.TType.STOP) {
        break;
      }
      switch (fieldId) {
        case 1:
          if (fieldType === thrift.TType.STRING) {
            const value_1: string = input.readString();
            _args.id = value_1;
          } else {
            input.skip(fieldType);
          }
          break;
        case 2:
          if (fieldType === thrift.TType.I32) {
            const value_2: __NAMESPACE__.EntityType = input.readI32();
            _args.entityType = value_2;
          } else {
            input.skip(fieldType);
          }
          break;
        case 3:
          if (fieldType === thrift.TType.STRING) {
            const value_3: string = input.readString();
            _args.googleId = value_3;
          } else {
            input.skip(fieldType);
          }
          break;
        case 4:
          if (fieldType === thrift.TType.STRUCT) {
            const value_4: com_gu_contententity_thrift_entity_person.IPerson = com_gu_contententity_thrift_entity_person.PersonCodec.decode(
              input
            );
            _args.person = value_4;
          } else {
            input.skip(fieldType);
          }
          break;
        case 5:
          if (fieldType === thrift.TType.STRUCT) {
            const value_5: com_gu_contententity_thrift_entity_film.IFilm = com_gu_contententity_thrift_entity_film.FilmCodec.decode(
              input
            );
            _args.film = value_5;
          } else {
            input.skip(fieldType);
          }
          break;
        case 6:
          if (fieldType === thrift.TType.STRUCT) {
            const value_6: com_gu_contententity_thrift_entity_game.IGame = com_gu_contententity_thrift_entity_game.GameCodec.decode(
              input
            );
            _args.game = value_6;
          } else {
            input.skip(fieldType);
          }
          break;
        case 7:
          if (fieldType === thrift.TType.STRUCT) {
            const value_7: com_gu_contententity_thrift_entity_restaurant.IRestaurant = com_gu_contententity_thrift_entity_restaurant.RestaurantCodec.decode(
              input
            );
            _args.restaurant = value_7;
          } else {
            input.skip(fieldType);
          }
          break;
        case 8:
          if (fieldType === thrift.TType.STRUCT) {
            const value_8: com_gu_contententity_thrift_entity_place.IPlace = com_gu_contententity_thrift_entity_place.PlaceCodec.decode(
              input
            );
            _args.place = value_8;
          } else {
            input.skip(fieldType);
          }
          break;
        case 9:
          if (fieldType === thrift.TType.STRUCT) {
            const value_9: com_gu_contententity_thrift_entity_organisation.IOrganisation = com_gu_contententity_thrift_entity_organisation.OrganisationCodec.decode(
              input
            );
            _args.organisation = value_9;
          } else {
            input.skip(fieldType);
          }
          break;
        default: {
          input.skip(fieldType);
        }
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    if (_args.id !== undefined && _args.entityType !== undefined) {
      return {
        id: _args.id,
        entityType: _args.entityType,
        googleId: _args.googleId,
        person: _args.person,
        film: _args.film,
        game: _args.game,
        restaurant: _args.restaurant,
        place: _args.place,
        organisation: _args.organisation,
      };
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Unable to read Entity from input'
      );
    }
  },
};
export class Entity extends thrift.StructLike implements IEntity {
  public id: string;
  public entityType: __NAMESPACE__.EntityType;
  public googleId?: string;
  public person?: com_gu_contententity_thrift_entity_person.IPerson;
  public film?: com_gu_contententity_thrift_entity_film.IFilm;
  public game?: com_gu_contententity_thrift_entity_game.IGame;
  public restaurant?: com_gu_contententity_thrift_entity_restaurant.IRestaurant;
  public place?: com_gu_contententity_thrift_entity_place.IPlace;
  public organisation?: com_gu_contententity_thrift_entity_organisation.IOrganisation;
  public readonly _annotations: thrift.IThriftAnnotations = {};
  public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
  constructor(args: IEntityArgs) {
    super();
    if (args.id != null) {
      const value_10: string = args.id;
      this.id = value_10;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[id] is unset!'
      );
    }
    if (args.entityType != null) {
      const value_11: __NAMESPACE__.EntityType = args.entityType;
      this.entityType = value_11;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Required field[entityType] is unset!'
      );
    }
    if (args.googleId != null) {
      const value_12: string = args.googleId;
      this.googleId = value_12;
    }
    if (args.person != null) {
      const value_13: com_gu_contententity_thrift_entity_person.IPerson = new com_gu_contententity_thrift_entity_person.Person(
        args.person
      );
      this.person = value_13;
    }
    if (args.film != null) {
      const value_14: com_gu_contententity_thrift_entity_film.IFilm = new com_gu_contententity_thrift_entity_film.Film(
        args.film
      );
      this.film = value_14;
    }
    if (args.game != null) {
      const value_15: com_gu_contententity_thrift_entity_game.IGame = new com_gu_contententity_thrift_entity_game.Game(
        args.game
      );
      this.game = value_15;
    }
    if (args.restaurant != null) {
      const value_16: com_gu_contententity_thrift_entity_restaurant.IRestaurant = new com_gu_contententity_thrift_entity_restaurant.Restaurant(
        args.restaurant
      );
      this.restaurant = value_16;
    }
    if (args.place != null) {
      const value_17: com_gu_contententity_thrift_entity_place.IPlace = new com_gu_contententity_thrift_entity_place.Place(
        args.place
      );
      this.place = value_17;
    }
    if (args.organisation != null) {
      const value_18: com_gu_contententity_thrift_entity_organisation.IOrganisation = new com_gu_contententity_thrift_entity_organisation.Organisation(
        args.organisation
      );
      this.organisation = value_18;
    }
  }
  public static read(input: thrift.TProtocol): Entity {
    return new Entity(EntityCodec.decode(input));
  }
  public static write(args: IEntityArgs, output: thrift.TProtocol): void {
    return EntityCodec.encode(args, output);
  }
  public write(output: thrift.TProtocol): void {
    return EntityCodec.encode(this, output);
  }
}

/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.5.0
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import * as thrift from '@creditkarma/thrift-server-core';
import * as contentatom_quiz from './../../../../contentatom/quiz';
import * as contentatom_media from './../../../../contentatom/media';
import * as contentatom_explainer from './../../../../contentatom/explainer';
import * as contentatom_cta from './../../../../contentatom/cta';
import * as contentatom_interactive from './../../../../contentatom/interactive';
import * as contentatom_review from './../../../../contentatom/review';
import * as contentatom_recipe from './../../../../contentatom/recipe';
import * as contentatom_storyquestions from './../../../../contentatom/storyquestions';
import * as contentatom_qanda from './../../../../contentatom/qanda';
import * as contentatom_guide from './../../../../contentatom/guide';
import * as contentatom_profile from './../../../../contentatom/profile';
import * as contentatom_timeline from './../../../../contentatom/timeline';
import * as contentatom_commonsdivision from './../../../../contentatom/commonsdivision';
import * as contentatom_chart from './../../../../contentatom/chart';
import * as contentatom_audio from './../../../../contentatom/audio';
export interface IAtomData {
  quiz?: contentatom_quiz.IQuizAtom;
  media?: contentatom_media.IMediaAtom;
  explainer?: contentatom_explainer.IExplainerAtom;
  cta?: contentatom_cta.ICTAAtom;
  interactive?: contentatom_interactive.IInteractiveAtom;
  review?: contentatom_review.IReviewAtom;
  recipe?: contentatom_recipe.IRecipeAtom;
  storyquestions?: contentatom_storyquestions.IStoryQuestionsAtom;
  qanda?: contentatom_qanda.IQAndAAtom;
  guide?: contentatom_guide.IGuideAtom;
  profile?: contentatom_profile.IProfileAtom;
  timeline?: contentatom_timeline.ITimelineAtom;
  commonsDivision?: contentatom_commonsdivision.ICommonsDivision;
  chart?: contentatom_chart.IChartAtom;
  audio?: contentatom_audio.IAudioAtom;
}
export interface IAtomDataArgs {
  quiz?: contentatom_quiz.IQuizAtomArgs;
  media?: contentatom_media.IMediaAtomArgs;
  explainer?: contentatom_explainer.IExplainerAtomArgs;
  cta?: contentatom_cta.ICTAAtomArgs;
  interactive?: contentatom_interactive.IInteractiveAtomArgs;
  review?: contentatom_review.IReviewAtomArgs;
  recipe?: contentatom_recipe.IRecipeAtomArgs;
  storyquestions?: contentatom_storyquestions.IStoryQuestionsAtomArgs;
  qanda?: contentatom_qanda.IQAndAAtomArgs;
  guide?: contentatom_guide.IGuideAtomArgs;
  profile?: contentatom_profile.IProfileAtomArgs;
  timeline?: contentatom_timeline.ITimelineAtomArgs;
  commonsDivision?: contentatom_commonsdivision.ICommonsDivisionArgs;
  chart?: contentatom_chart.IChartAtomArgs;
  audio?: contentatom_audio.IAudioAtomArgs;
}
export const AtomDataCodec: thrift.IStructCodec<IAtomDataArgs, IAtomData> = {
  encode(args: IAtomDataArgs, output: thrift.TProtocol): void {
    let _fieldsSet: number = 0;
    const obj = {
      quiz: args.quiz,
      media: args.media,
      explainer: args.explainer,
      cta: args.cta,
      interactive: args.interactive,
      review: args.review,
      recipe: args.recipe,
      storyquestions: args.storyquestions,
      qanda: args.qanda,
      guide: args.guide,
      profile: args.profile,
      timeline: args.timeline,
      commonsDivision: args.commonsDivision,
      chart: args.chart,
      audio: args.audio,
    };
    output.writeStructBegin('AtomData');
    if (obj.quiz != null) {
      _fieldsSet++;
      output.writeFieldBegin('quiz', thrift.TType.STRUCT, 1);
      contentatom_quiz.QuizAtomCodec.encode(obj.quiz, output);
      output.writeFieldEnd();
    }
    if (obj.media != null) {
      _fieldsSet++;
      output.writeFieldBegin('media', thrift.TType.STRUCT, 3);
      contentatom_media.MediaAtomCodec.encode(obj.media, output);
      output.writeFieldEnd();
    }
    if (obj.explainer != null) {
      _fieldsSet++;
      output.writeFieldBegin('explainer', thrift.TType.STRUCT, 4);
      contentatom_explainer.ExplainerAtomCodec.encode(obj.explainer, output);
      output.writeFieldEnd();
    }
    if (obj.cta != null) {
      _fieldsSet++;
      output.writeFieldBegin('cta', thrift.TType.STRUCT, 5);
      contentatom_cta.CTAAtomCodec.encode(obj.cta, output);
      output.writeFieldEnd();
    }
    if (obj.interactive != null) {
      _fieldsSet++;
      output.writeFieldBegin('interactive', thrift.TType.STRUCT, 6);
      contentatom_interactive.InteractiveAtomCodec.encode(
        obj.interactive,
        output
      );
      output.writeFieldEnd();
    }
    if (obj.review != null) {
      _fieldsSet++;
      output.writeFieldBegin('review', thrift.TType.STRUCT, 7);
      contentatom_review.ReviewAtomCodec.encode(obj.review, output);
      output.writeFieldEnd();
    }
    if (obj.recipe != null) {
      _fieldsSet++;
      output.writeFieldBegin('recipe', thrift.TType.STRUCT, 8);
      contentatom_recipe.RecipeAtomCodec.encode(obj.recipe, output);
      output.writeFieldEnd();
    }
    if (obj.storyquestions != null) {
      _fieldsSet++;
      output.writeFieldBegin('storyquestions', thrift.TType.STRUCT, 9);
      contentatom_storyquestions.StoryQuestionsAtomCodec.encode(
        obj.storyquestions,
        output
      );
      output.writeFieldEnd();
    }
    if (obj.qanda != null) {
      _fieldsSet++;
      output.writeFieldBegin('qanda', thrift.TType.STRUCT, 10);
      contentatom_qanda.QAndAAtomCodec.encode(obj.qanda, output);
      output.writeFieldEnd();
    }
    if (obj.guide != null) {
      _fieldsSet++;
      output.writeFieldBegin('guide', thrift.TType.STRUCT, 11);
      contentatom_guide.GuideAtomCodec.encode(obj.guide, output);
      output.writeFieldEnd();
    }
    if (obj.profile != null) {
      _fieldsSet++;
      output.writeFieldBegin('profile', thrift.TType.STRUCT, 12);
      contentatom_profile.ProfileAtomCodec.encode(obj.profile, output);
      output.writeFieldEnd();
    }
    if (obj.timeline != null) {
      _fieldsSet++;
      output.writeFieldBegin('timeline', thrift.TType.STRUCT, 13);
      contentatom_timeline.TimelineAtomCodec.encode(obj.timeline, output);
      output.writeFieldEnd();
    }
    if (obj.commonsDivision != null) {
      _fieldsSet++;
      output.writeFieldBegin('commonsDivision', thrift.TType.STRUCT, 14);
      contentatom_commonsdivision.CommonsDivisionCodec.encode(
        obj.commonsDivision,
        output
      );
      output.writeFieldEnd();
    }
    if (obj.chart != null) {
      _fieldsSet++;
      output.writeFieldBegin('chart', thrift.TType.STRUCT, 15);
      contentatom_chart.ChartAtomCodec.encode(obj.chart, output);
      output.writeFieldEnd();
    }
    if (obj.audio != null) {
      _fieldsSet++;
      output.writeFieldBegin('audio', thrift.TType.STRUCT, 16);
      contentatom_audio.AudioAtomCodec.encode(obj.audio, output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    if (_fieldsSet > 1) {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.INVALID_DATA,
        'TUnion cannot have more than one value'
      );
    } else if (_fieldsSet < 1) {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.INVALID_DATA,
        'TUnion must have one value set'
      );
    }
    return;
  },
  decode(input: thrift.TProtocol): IAtomData {
    let _fieldsSet: number = 0;
    let _returnValue: IAtomData | null = null;
    input.readStructBegin();
    while (true) {
      const ret: thrift.IThriftField = input.readFieldBegin();
      const fieldType: thrift.TType = ret.fieldType;
      const fieldId: number = ret.fieldId;
      if (fieldType === thrift.TType.STOP) {
        break;
      }
      switch (fieldId) {
        case 1:
          if (fieldType === thrift.TType.STRUCT) {
            _fieldsSet++;
            const value_1: contentatom_quiz.IQuizAtom = contentatom_quiz.QuizAtomCodec.decode(
              input
            );
            _returnValue = { quiz: value_1 };
          } else {
            input.skip(fieldType);
          }
          break;
        case 3:
          if (fieldType === thrift.TType.STRUCT) {
            _fieldsSet++;
            const value_2: contentatom_media.IMediaAtom = contentatom_media.MediaAtomCodec.decode(
              input
            );
            _returnValue = { media: value_2 };
          } else {
            input.skip(fieldType);
          }
          break;
        case 4:
          if (fieldType === thrift.TType.STRUCT) {
            _fieldsSet++;
            const value_3: contentatom_explainer.IExplainerAtom = contentatom_explainer.ExplainerAtomCodec.decode(
              input
            );
            _returnValue = { explainer: value_3 };
          } else {
            input.skip(fieldType);
          }
          break;
        case 5:
          if (fieldType === thrift.TType.STRUCT) {
            _fieldsSet++;
            const value_4: contentatom_cta.ICTAAtom = contentatom_cta.CTAAtomCodec.decode(
              input
            );
            _returnValue = { cta: value_4 };
          } else {
            input.skip(fieldType);
          }
          break;
        case 6:
          if (fieldType === thrift.TType.STRUCT) {
            _fieldsSet++;
            const value_5: contentatom_interactive.IInteractiveAtom = contentatom_interactive.InteractiveAtomCodec.decode(
              input
            );
            _returnValue = { interactive: value_5 };
          } else {
            input.skip(fieldType);
          }
          break;
        case 7:
          if (fieldType === thrift.TType.STRUCT) {
            _fieldsSet++;
            const value_6: contentatom_review.IReviewAtom = contentatom_review.ReviewAtomCodec.decode(
              input
            );
            _returnValue = { review: value_6 };
          } else {
            input.skip(fieldType);
          }
          break;
        case 8:
          if (fieldType === thrift.TType.STRUCT) {
            _fieldsSet++;
            const value_7: contentatom_recipe.IRecipeAtom = contentatom_recipe.RecipeAtomCodec.decode(
              input
            );
            _returnValue = { recipe: value_7 };
          } else {
            input.skip(fieldType);
          }
          break;
        case 9:
          if (fieldType === thrift.TType.STRUCT) {
            _fieldsSet++;
            const value_8: contentatom_storyquestions.IStoryQuestionsAtom = contentatom_storyquestions.StoryQuestionsAtomCodec.decode(
              input
            );
            _returnValue = { storyquestions: value_8 };
          } else {
            input.skip(fieldType);
          }
          break;
        case 10:
          if (fieldType === thrift.TType.STRUCT) {
            _fieldsSet++;
            const value_9: contentatom_qanda.IQAndAAtom = contentatom_qanda.QAndAAtomCodec.decode(
              input
            );
            _returnValue = { qanda: value_9 };
          } else {
            input.skip(fieldType);
          }
          break;
        case 11:
          if (fieldType === thrift.TType.STRUCT) {
            _fieldsSet++;
            const value_10: contentatom_guide.IGuideAtom = contentatom_guide.GuideAtomCodec.decode(
              input
            );
            _returnValue = { guide: value_10 };
          } else {
            input.skip(fieldType);
          }
          break;
        case 12:
          if (fieldType === thrift.TType.STRUCT) {
            _fieldsSet++;
            const value_11: contentatom_profile.IProfileAtom = contentatom_profile.ProfileAtomCodec.decode(
              input
            );
            _returnValue = { profile: value_11 };
          } else {
            input.skip(fieldType);
          }
          break;
        case 13:
          if (fieldType === thrift.TType.STRUCT) {
            _fieldsSet++;
            const value_12: contentatom_timeline.ITimelineAtom = contentatom_timeline.TimelineAtomCodec.decode(
              input
            );
            _returnValue = { timeline: value_12 };
          } else {
            input.skip(fieldType);
          }
          break;
        case 14:
          if (fieldType === thrift.TType.STRUCT) {
            _fieldsSet++;
            const value_13: contentatom_commonsdivision.ICommonsDivision = contentatom_commonsdivision.CommonsDivisionCodec.decode(
              input
            );
            _returnValue = { commonsDivision: value_13 };
          } else {
            input.skip(fieldType);
          }
          break;
        case 15:
          if (fieldType === thrift.TType.STRUCT) {
            _fieldsSet++;
            const value_14: contentatom_chart.IChartAtom = contentatom_chart.ChartAtomCodec.decode(
              input
            );
            _returnValue = { chart: value_14 };
          } else {
            input.skip(fieldType);
          }
          break;
        case 16:
          if (fieldType === thrift.TType.STRUCT) {
            _fieldsSet++;
            const value_15: contentatom_audio.IAudioAtom = contentatom_audio.AudioAtomCodec.decode(
              input
            );
            _returnValue = { audio: value_15 };
          } else {
            input.skip(fieldType);
          }
          break;
        default: {
          input.skip(fieldType);
        }
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    if (_fieldsSet > 1) {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.INVALID_DATA,
        'TUnion cannot have more than one value'
      );
    } else if (_fieldsSet < 1) {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.INVALID_DATA,
        'TUnion must have one value set'
      );
    }
    if (_returnValue !== null) {
      return _returnValue;
    } else {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.UNKNOWN,
        'Unable to read data for TUnion'
      );
    }
  },
};
export class AtomData extends thrift.StructLike implements IAtomData {
  public quiz?: contentatom_quiz.IQuizAtom;
  public media?: contentatom_media.IMediaAtom;
  public explainer?: contentatom_explainer.IExplainerAtom;
  public cta?: contentatom_cta.ICTAAtom;
  public interactive?: contentatom_interactive.IInteractiveAtom;
  public review?: contentatom_review.IReviewAtom;
  public recipe?: contentatom_recipe.IRecipeAtom;
  public storyquestions?: contentatom_storyquestions.IStoryQuestionsAtom;
  public qanda?: contentatom_qanda.IQAndAAtom;
  public guide?: contentatom_guide.IGuideAtom;
  public profile?: contentatom_profile.IProfileAtom;
  public timeline?: contentatom_timeline.ITimelineAtom;
  public commonsDivision?: contentatom_commonsdivision.ICommonsDivision;
  public chart?: contentatom_chart.IChartAtom;
  public audio?: contentatom_audio.IAudioAtom;
  public readonly _annotations: thrift.IThriftAnnotations = {};
  public readonly _fieldAnnotations: thrift.IFieldAnnotations = {};
  constructor(args: IAtomDataArgs = {}) {
    super();
    let _fieldsSet: number = 0;
    if (args.quiz != null) {
      _fieldsSet++;
      const value_16: contentatom_quiz.IQuizAtom = new contentatom_quiz.QuizAtom(
        args.quiz
      );
      this.quiz = value_16;
    }
    if (args.media != null) {
      _fieldsSet++;
      const value_17: contentatom_media.IMediaAtom = new contentatom_media.MediaAtom(
        args.media
      );
      this.media = value_17;
    }
    if (args.explainer != null) {
      _fieldsSet++;
      const value_18: contentatom_explainer.IExplainerAtom = new contentatom_explainer.ExplainerAtom(
        args.explainer
      );
      this.explainer = value_18;
    }
    if (args.cta != null) {
      _fieldsSet++;
      const value_19: contentatom_cta.ICTAAtom = new contentatom_cta.CTAAtom(
        args.cta
      );
      this.cta = value_19;
    }
    if (args.interactive != null) {
      _fieldsSet++;
      const value_20: contentatom_interactive.IInteractiveAtom = new contentatom_interactive.InteractiveAtom(
        args.interactive
      );
      this.interactive = value_20;
    }
    if (args.review != null) {
      _fieldsSet++;
      const value_21: contentatom_review.IReviewAtom = new contentatom_review.ReviewAtom(
        args.review
      );
      this.review = value_21;
    }
    if (args.recipe != null) {
      _fieldsSet++;
      const value_22: contentatom_recipe.IRecipeAtom = new contentatom_recipe.RecipeAtom(
        args.recipe
      );
      this.recipe = value_22;
    }
    if (args.storyquestions != null) {
      _fieldsSet++;
      const value_23: contentatom_storyquestions.IStoryQuestionsAtom = new contentatom_storyquestions.StoryQuestionsAtom(
        args.storyquestions
      );
      this.storyquestions = value_23;
    }
    if (args.qanda != null) {
      _fieldsSet++;
      const value_24: contentatom_qanda.IQAndAAtom = new contentatom_qanda.QAndAAtom(
        args.qanda
      );
      this.qanda = value_24;
    }
    if (args.guide != null) {
      _fieldsSet++;
      const value_25: contentatom_guide.IGuideAtom = new contentatom_guide.GuideAtom(
        args.guide
      );
      this.guide = value_25;
    }
    if (args.profile != null) {
      _fieldsSet++;
      const value_26: contentatom_profile.IProfileAtom = new contentatom_profile.ProfileAtom(
        args.profile
      );
      this.profile = value_26;
    }
    if (args.timeline != null) {
      _fieldsSet++;
      const value_27: contentatom_timeline.ITimelineAtom = new contentatom_timeline.TimelineAtom(
        args.timeline
      );
      this.timeline = value_27;
    }
    if (args.commonsDivision != null) {
      _fieldsSet++;
      const value_28: contentatom_commonsdivision.ICommonsDivision = new contentatom_commonsdivision.CommonsDivision(
        args.commonsDivision
      );
      this.commonsDivision = value_28;
    }
    if (args.chart != null) {
      _fieldsSet++;
      const value_29: contentatom_chart.IChartAtom = new contentatom_chart.ChartAtom(
        args.chart
      );
      this.chart = value_29;
    }
    if (args.audio != null) {
      _fieldsSet++;
      const value_30: contentatom_audio.IAudioAtom = new contentatom_audio.AudioAtom(
        args.audio
      );
      this.audio = value_30;
    }
    if (_fieldsSet > 1) {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.INVALID_DATA,
        'TUnion cannot have more than one value'
      );
    } else if (_fieldsSet < 1) {
      throw new thrift.TProtocolException(
        thrift.TProtocolExceptionType.INVALID_DATA,
        'TUnion must have one value set'
      );
    }
  }
  public static read(input: thrift.TProtocol): AtomData {
    return new AtomData(AtomDataCodec.decode(input));
  }
  public static write(args: IAtomDataArgs, output: thrift.TProtocol): void {
    return AtomDataCodec.encode(args, output);
  }
  public write(output: thrift.TProtocol): void {
    return AtomDataCodec.encode(this, output);
  }
}
